//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.TSProtocolVersion = {
  'IOTDB_SERVICE_PROTOCOL_V1' : 1,
  'IOTDB_SERVICE_PROTOCOL_V2' : 2,
  'IOTDB_SERVICE_PROTOCOL_V3' : 3
};
var TSOpenSessionReq = module.exports.TSOpenSessionReq = function(args) {
  this.username = null;
  this.password = null;
  this.client_protocol = null;
  this.zoneId = null;
  this.configuration = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    }
    if (args.zoneId !== undefined && args.zoneId !== null) {
      this.zoneId = args.zoneId;
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
  }
};
TSOpenSessionReq.prototype = {};
TSOpenSessionReq.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.zoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.configuration[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSOpenSessionReq.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSOpenSessionReq');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 3);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.zoneId !== null && this.zoneId !== undefined) {
    output.writeFieldBegin('zoneId', Thrift.Type.STRING, 4);
    output.writeString(this.zoneId);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter5 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter5)) {
        var viter6 = this.configuration[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCloseSessionReq = module.exports.TSCloseSessionReq = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
  }
};
TSCloseSessionReq.prototype = {};
TSCloseSessionReq.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCloseSessionReq.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSCloseSessionReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSExecuteStatementReq = module.exports.TSExecuteStatementReq = function(args) {
  this.sessionId = null;
  this.statement = null;
  this.statementId = null;
  this.fetchSize = null;
  this.timeout = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fetchSize is unset!');
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
TSExecuteStatementReq.prototype = {};
TSExecuteStatementReq.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.timeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSExecuteStatementReq.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSExecuteStatementReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 3);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 4);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I32, 5);
    output.writeI32(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertRecordReq = module.exports.TSInsertRecordReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurements = null;
  this.values = null;
  this.timestamp = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertRecordReq.prototype = {};
TSInsertRecordReq.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp38 = input.readListBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var elem10 = null;
          elem10 = input.readString();
          this.measurements.push(elem10);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.values = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertRecordReq.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSInsertRecordReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter11 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter11)) {
        iter11 = this.measurements[iter11];
        output.writeString(iter11);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.STRING, 4);
    output.writeBinary(this.values);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSOpenSessionResp = module.exports.TSOpenSessionResp = function(args) {
  this.sessionId = null;
  this.serverProtocolVersion = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.serverProtocolVersion !== undefined && args.serverProtocolVersion !== null) {
      this.serverProtocolVersion = args.serverProtocolVersion;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverProtocolVersion is unset!');
    }
  }
};
TSOpenSessionResp.prototype = {};
TSOpenSessionResp.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocolVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSOpenSessionResp.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSOpenSessionResp');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.serverProtocolVersion !== null && this.serverProtocolVersion !== undefined) {
    output.writeFieldBegin('serverProtocolVersion', Thrift.Type.I32, 2);
    output.writeI32(this.serverProtocolVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSExecuteStatementResp = module.exports.TSExecuteStatementResp = function(args) {
  this.columns = null;
  this.dataTypeList = null;
  this.columnNameIndexMap = null;
  this.queryId = null;
  this.queryDataSet = null;
  this.ignoreTimeStamp = null;
  if (args) {
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.dataTypeList !== undefined && args.dataTypeList !== null) {
      this.dataTypeList = Thrift.copyList(args.dataTypeList, [null]);
    }
    if (args.columnNameIndexMap !== undefined && args.columnNameIndexMap !== null) {
      this.columnNameIndexMap = Thrift.copyMap(args.columnNameIndexMap, [null]);
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    }
    if (args.queryDataSet !== undefined && args.queryDataSet !== null) {
      this.queryDataSet = new ttypes.QueryDataSet(args.queryDataSet);
    }
    if (args.ignoreTimeStamp !== undefined && args.ignoreTimeStamp !== null) {
      this.ignoreTimeStamp = args.ignoreTimeStamp;
    }
  }
};
TSExecuteStatementResp.prototype = {};
TSExecuteStatementResp.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = input.readString();
          this.columns.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.dataTypeList = [];
        var _rtmp317 = input.readListBegin();
        var _size16 = _rtmp317.size || 0;
        for (var _i18 = 0; _i18 < _size16; ++_i18) {
          var elem19 = null;
          elem19 = input.readI32();
          this.dataTypeList.push(elem19);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.columnNameIndexMap = {};
        var _rtmp321 = input.readMapBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var key23 = null;
          var val24 = null;
          key23 = input.readString();
          val24 = input.readI32();
          this.columnNameIndexMap[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryDataSet = new ttypes.QueryDataSet();
        this.queryDataSet[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreTimeStamp = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSExecuteStatementResp.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TSExecuteStatementResp');
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter25 in this.columns) {
      if (this.columns.hasOwnProperty(iter25)) {
        iter25 = this.columns[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataTypeList !== null && this.dataTypeList !== undefined) {
    output.writeFieldBegin('dataTypeList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dataTypeList.length);
    for (var iter26 in this.dataTypeList) {
      if (this.dataTypeList.hasOwnProperty(iter26)) {
        iter26 = this.dataTypeList[iter26];
        output.writeI32(iter26);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnNameIndexMap !== null && this.columnNameIndexMap !== undefined) {
    output.writeFieldBegin('columnNameIndexMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.columnNameIndexMap));
    for (var kiter27 in this.columnNameIndexMap) {
      if (this.columnNameIndexMap.hasOwnProperty(kiter27)) {
        var viter28 = this.columnNameIndexMap[kiter27];
        output.writeString(kiter27);
        output.writeI32(viter28);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 4);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  if (this.queryDataSet !== null && this.queryDataSet !== undefined) {
    output.writeFieldBegin('queryDataSet', Thrift.Type.STRUCT, 5);
    this.queryDataSet[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.ignoreTimeStamp !== null && this.ignoreTimeStamp !== undefined) {
    output.writeFieldBegin('ignoreTimeStamp', Thrift.Type.BOOL, 6);
    output.writeBool(this.ignoreTimeStamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryDataSet = module.exports.QueryDataSet = function(args) {
  this.valueList = null;
  this.bitmapList = null;
  this.time = null;
  if (args) {
    if (args.valueList !== undefined && args.valueList !== null) {
      this.valueList = Thrift.copyList(args.valueList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueList is unset!');
    }
    if (args.bitmapList !== undefined && args.bitmapList !== null) {
      this.bitmapList = Thrift.copyList(args.bitmapList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bitmapList is unset!');
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
  }
};
QueryDataSet.prototype = {};
QueryDataSet.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.valueList = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = input.readBinary();
          this.valueList.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.bitmapList = [];
        var _rtmp334 = input.readListBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var elem36 = null;
          elem36 = input.readBinary();
          this.bitmapList.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryDataSet.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('QueryDataSet');
  if (this.valueList !== null && this.valueList !== undefined) {
    output.writeFieldBegin('valueList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.valueList.length);
    for (var iter37 in this.valueList) {
      if (this.valueList.hasOwnProperty(iter37)) {
        iter37 = this.valueList[iter37];
        output.writeBinary(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bitmapList !== null && this.bitmapList !== undefined) {
    output.writeFieldBegin('bitmapList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.bitmapList.length);
    for (var iter38 in this.bitmapList) {
      if (this.bitmapList.hasOwnProperty(iter38)) {
        iter38 = this.bitmapList[iter38];
        output.writeBinary(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 3);
    output.writeBinary(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

