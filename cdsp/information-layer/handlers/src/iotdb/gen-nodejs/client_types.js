//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
ttypes.TSProtocolVersion = {
  'IOTDB_SERVICE_PROTOCOL_V1' : 0,
  'IOTDB_SERVICE_PROTOCOL_V2' : 1,
  'IOTDB_SERVICE_PROTOCOL_V3' : 2
};
ttypes.TSConnectionType = {
  'THRIFT_BASED' : 0,
  'MQTT_BASED' : 1,
  'INTERNAL' : 2,
  'REST_BASED' : 3
};
var TSQueryDataSet = module.exports.TSQueryDataSet = function(args) {
  this.time = null;
  this.valueList = null;
  this.bitmapList = null;
  if (args) {
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.valueList !== undefined && args.valueList !== null) {
      this.valueList = Thrift.copyList(args.valueList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueList is unset!');
    }
    if (args.bitmapList !== undefined && args.bitmapList !== null) {
      this.bitmapList = Thrift.copyList(args.bitmapList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bitmapList is unset!');
    }
  }
};
TSQueryDataSet.prototype = {};
TSQueryDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.valueList = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readBinary();
          this.valueList.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.bitmapList = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readBinary();
          this.bitmapList.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSQueryDataSet.prototype.write = function(output) {
  output.writeStructBegin('TSQueryDataSet');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeBinary(this.time);
    output.writeFieldEnd();
  }
  if (this.valueList !== null && this.valueList !== undefined) {
    output.writeFieldBegin('valueList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.valueList.length);
    for (var iter8 in this.valueList) {
      if (this.valueList.hasOwnProperty(iter8)) {
        iter8 = this.valueList[iter8];
        output.writeBinary(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bitmapList !== null && this.bitmapList !== undefined) {
    output.writeFieldBegin('bitmapList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.bitmapList.length);
    for (var iter9 in this.bitmapList) {
      if (this.bitmapList.hasOwnProperty(iter9)) {
        iter9 = this.bitmapList[iter9];
        output.writeBinary(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSQueryNonAlignDataSet = module.exports.TSQueryNonAlignDataSet = function(args) {
  this.timeList = null;
  this.valueList = null;
  if (args) {
    if (args.timeList !== undefined && args.timeList !== null) {
      this.timeList = Thrift.copyList(args.timeList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timeList is unset!');
    }
    if (args.valueList !== undefined && args.valueList !== null) {
      this.valueList = Thrift.copyList(args.valueList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueList is unset!');
    }
  }
};
TSQueryNonAlignDataSet.prototype = {};
TSQueryNonAlignDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.timeList = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = input.readBinary();
          this.timeList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.valueList = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = input.readBinary();
          this.valueList.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSQueryNonAlignDataSet.prototype.write = function(output) {
  output.writeStructBegin('TSQueryNonAlignDataSet');
  if (this.timeList !== null && this.timeList !== undefined) {
    output.writeFieldBegin('timeList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.timeList.length);
    for (var iter18 in this.timeList) {
      if (this.timeList.hasOwnProperty(iter18)) {
        iter18 = this.timeList[iter18];
        output.writeBinary(iter18);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valueList !== null && this.valueList !== undefined) {
    output.writeFieldBegin('valueList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.valueList.length);
    for (var iter19 in this.valueList) {
      if (this.valueList.hasOwnProperty(iter19)) {
        iter19 = this.valueList[iter19];
        output.writeBinary(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSTracingInfo = module.exports.TSTracingInfo = function(args) {
  this.activityList = null;
  this.elapsedTimeList = null;
  this.seriesPathNum = null;
  this.seqFileNum = null;
  this.unSeqFileNum = null;
  this.sequenceChunkNum = null;
  this.sequenceChunkPointNum = null;
  this.unsequenceChunkNum = null;
  this.unsequenceChunkPointNum = null;
  this.totalPageNum = null;
  this.overlappedPageNum = null;
  if (args) {
    if (args.activityList !== undefined && args.activityList !== null) {
      this.activityList = Thrift.copyList(args.activityList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field activityList is unset!');
    }
    if (args.elapsedTimeList !== undefined && args.elapsedTimeList !== null) {
      this.elapsedTimeList = Thrift.copyList(args.elapsedTimeList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elapsedTimeList is unset!');
    }
    if (args.seriesPathNum !== undefined && args.seriesPathNum !== null) {
      this.seriesPathNum = args.seriesPathNum;
    }
    if (args.seqFileNum !== undefined && args.seqFileNum !== null) {
      this.seqFileNum = args.seqFileNum;
    }
    if (args.unSeqFileNum !== undefined && args.unSeqFileNum !== null) {
      this.unSeqFileNum = args.unSeqFileNum;
    }
    if (args.sequenceChunkNum !== undefined && args.sequenceChunkNum !== null) {
      this.sequenceChunkNum = args.sequenceChunkNum;
    }
    if (args.sequenceChunkPointNum !== undefined && args.sequenceChunkPointNum !== null) {
      this.sequenceChunkPointNum = args.sequenceChunkPointNum;
    }
    if (args.unsequenceChunkNum !== undefined && args.unsequenceChunkNum !== null) {
      this.unsequenceChunkNum = args.unsequenceChunkNum;
    }
    if (args.unsequenceChunkPointNum !== undefined && args.unsequenceChunkPointNum !== null) {
      this.unsequenceChunkPointNum = args.unsequenceChunkPointNum;
    }
    if (args.totalPageNum !== undefined && args.totalPageNum !== null) {
      this.totalPageNum = args.totalPageNum;
    }
    if (args.overlappedPageNum !== undefined && args.overlappedPageNum !== null) {
      this.overlappedPageNum = args.overlappedPageNum;
    }
  }
};
TSTracingInfo.prototype = {};
TSTracingInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.activityList = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString();
          this.activityList.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.elapsedTimeList = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = input.readI64();
          this.elapsedTimeList.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.seriesPathNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.seqFileNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.unSeqFileNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sequenceChunkNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.sequenceChunkPointNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.unsequenceChunkNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.unsequenceChunkPointNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.totalPageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.overlappedPageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSTracingInfo.prototype.write = function(output) {
  output.writeStructBegin('TSTracingInfo');
  if (this.activityList !== null && this.activityList !== undefined) {
    output.writeFieldBegin('activityList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.activityList.length);
    for (var iter28 in this.activityList) {
      if (this.activityList.hasOwnProperty(iter28)) {
        iter28 = this.activityList[iter28];
        output.writeString(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.elapsedTimeList !== null && this.elapsedTimeList !== undefined) {
    output.writeFieldBegin('elapsedTimeList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.elapsedTimeList.length);
    for (var iter29 in this.elapsedTimeList) {
      if (this.elapsedTimeList.hasOwnProperty(iter29)) {
        iter29 = this.elapsedTimeList[iter29];
        output.writeI64(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.seriesPathNum !== null && this.seriesPathNum !== undefined) {
    output.writeFieldBegin('seriesPathNum', Thrift.Type.I32, 3);
    output.writeI32(this.seriesPathNum);
    output.writeFieldEnd();
  }
  if (this.seqFileNum !== null && this.seqFileNum !== undefined) {
    output.writeFieldBegin('seqFileNum', Thrift.Type.I32, 4);
    output.writeI32(this.seqFileNum);
    output.writeFieldEnd();
  }
  if (this.unSeqFileNum !== null && this.unSeqFileNum !== undefined) {
    output.writeFieldBegin('unSeqFileNum', Thrift.Type.I32, 5);
    output.writeI32(this.unSeqFileNum);
    output.writeFieldEnd();
  }
  if (this.sequenceChunkNum !== null && this.sequenceChunkNum !== undefined) {
    output.writeFieldBegin('sequenceChunkNum', Thrift.Type.I32, 6);
    output.writeI32(this.sequenceChunkNum);
    output.writeFieldEnd();
  }
  if (this.sequenceChunkPointNum !== null && this.sequenceChunkPointNum !== undefined) {
    output.writeFieldBegin('sequenceChunkPointNum', Thrift.Type.I64, 7);
    output.writeI64(this.sequenceChunkPointNum);
    output.writeFieldEnd();
  }
  if (this.unsequenceChunkNum !== null && this.unsequenceChunkNum !== undefined) {
    output.writeFieldBegin('unsequenceChunkNum', Thrift.Type.I32, 8);
    output.writeI32(this.unsequenceChunkNum);
    output.writeFieldEnd();
  }
  if (this.unsequenceChunkPointNum !== null && this.unsequenceChunkPointNum !== undefined) {
    output.writeFieldBegin('unsequenceChunkPointNum', Thrift.Type.I64, 9);
    output.writeI64(this.unsequenceChunkPointNum);
    output.writeFieldEnd();
  }
  if (this.totalPageNum !== null && this.totalPageNum !== undefined) {
    output.writeFieldBegin('totalPageNum', Thrift.Type.I32, 10);
    output.writeI32(this.totalPageNum);
    output.writeFieldEnd();
  }
  if (this.overlappedPageNum !== null && this.overlappedPageNum !== undefined) {
    output.writeFieldBegin('overlappedPageNum', Thrift.Type.I32, 11);
    output.writeI32(this.overlappedPageNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSExecuteStatementResp = module.exports.TSExecuteStatementResp = function(args) {
  this.status = null;
  this.queryId = null;
  this.columns = null;
  this.operationType = null;
  this.ignoreTimeStamp = null;
  this.dataTypeList = null;
  this.queryDataSet = null;
  this.nonAlignQueryDataSet = null;
  this.columnNameIndexMap = null;
  this.sgColumns = null;
  this.aliasColumns = null;
  this.tracingInfo = null;
  this.queryResult = null;
  this.moreData = null;
  this.database = null;
  this.tableModel = null;
  this.columnIndex2TsBlockColumnIndexList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.operationType !== undefined && args.operationType !== null) {
      this.operationType = args.operationType;
    }
    if (args.ignoreTimeStamp !== undefined && args.ignoreTimeStamp !== null) {
      this.ignoreTimeStamp = args.ignoreTimeStamp;
    }
    if (args.dataTypeList !== undefined && args.dataTypeList !== null) {
      this.dataTypeList = Thrift.copyList(args.dataTypeList, [null]);
    }
    if (args.queryDataSet !== undefined && args.queryDataSet !== null) {
      this.queryDataSet = new ttypes.TSQueryDataSet(args.queryDataSet);
    }
    if (args.nonAlignQueryDataSet !== undefined && args.nonAlignQueryDataSet !== null) {
      this.nonAlignQueryDataSet = new ttypes.TSQueryNonAlignDataSet(args.nonAlignQueryDataSet);
    }
    if (args.columnNameIndexMap !== undefined && args.columnNameIndexMap !== null) {
      this.columnNameIndexMap = Thrift.copyMap(args.columnNameIndexMap, [null]);
    }
    if (args.sgColumns !== undefined && args.sgColumns !== null) {
      this.sgColumns = Thrift.copyList(args.sgColumns, [null]);
    }
    if (args.aliasColumns !== undefined && args.aliasColumns !== null) {
      this.aliasColumns = args.aliasColumns;
    }
    if (args.tracingInfo !== undefined && args.tracingInfo !== null) {
      this.tracingInfo = new ttypes.TSTracingInfo(args.tracingInfo);
    }
    if (args.queryResult !== undefined && args.queryResult !== null) {
      this.queryResult = Thrift.copyList(args.queryResult, [null]);
    }
    if (args.moreData !== undefined && args.moreData !== null) {
      this.moreData = args.moreData;
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
    if (args.tableModel !== undefined && args.tableModel !== null) {
      this.tableModel = args.tableModel;
    }
    if (args.columnIndex2TsBlockColumnIndexList !== undefined && args.columnIndex2TsBlockColumnIndexList !== null) {
      this.columnIndex2TsBlockColumnIndexList = Thrift.copyList(args.columnIndex2TsBlockColumnIndexList, [null]);
    }
  }
};
TSExecuteStatementResp.prototype = {};
TSExecuteStatementResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString();
          this.columns.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operationType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreTimeStamp = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.dataTypeList = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = input.readString();
          this.dataTypeList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryDataSet = new ttypes.TSQueryDataSet();
        this.queryDataSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.nonAlignQueryDataSet = new ttypes.TSQueryNonAlignDataSet();
        this.nonAlignQueryDataSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.columnNameIndexMap = {};
        var _rtmp339 = input.readMapBegin();
        var _size38 = _rtmp339.size || 0;
        for (var _i40 = 0; _i40 < _size38; ++_i40) {
          var key41 = null;
          var val42 = null;
          key41 = input.readString();
          val42 = input.readI32();
          this.columnNameIndexMap[key41] = val42;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.sgColumns = [];
        var _rtmp344 = input.readListBegin();
        var _size43 = _rtmp344.size || 0;
        for (var _i45 = 0; _i45 < _size43; ++_i45) {
          var elem46 = null;
          elem46 = input.readString();
          this.sgColumns.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.aliasColumns = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.tracingInfo = new ttypes.TSTracingInfo();
        this.tracingInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.queryResult = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = input.readBinary();
          this.queryResult.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.moreData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.tableModel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        this.columnIndex2TsBlockColumnIndexList = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = input.readI32();
          this.columnIndex2TsBlockColumnIndexList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSExecuteStatementResp.prototype.write = function(output) {
  output.writeStructBegin('TSExecuteStatementResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 2);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter55 in this.columns) {
      if (this.columns.hasOwnProperty(iter55)) {
        iter55 = this.columns[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.STRING, 4);
    output.writeString(this.operationType);
    output.writeFieldEnd();
  }
  if (this.ignoreTimeStamp !== null && this.ignoreTimeStamp !== undefined) {
    output.writeFieldBegin('ignoreTimeStamp', Thrift.Type.BOOL, 5);
    output.writeBool(this.ignoreTimeStamp);
    output.writeFieldEnd();
  }
  if (this.dataTypeList !== null && this.dataTypeList !== undefined) {
    output.writeFieldBegin('dataTypeList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.dataTypeList.length);
    for (var iter56 in this.dataTypeList) {
      if (this.dataTypeList.hasOwnProperty(iter56)) {
        iter56 = this.dataTypeList[iter56];
        output.writeString(iter56);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.queryDataSet !== null && this.queryDataSet !== undefined) {
    output.writeFieldBegin('queryDataSet', Thrift.Type.STRUCT, 7);
    this.queryDataSet.write(output);
    output.writeFieldEnd();
  }
  if (this.nonAlignQueryDataSet !== null && this.nonAlignQueryDataSet !== undefined) {
    output.writeFieldBegin('nonAlignQueryDataSet', Thrift.Type.STRUCT, 8);
    this.nonAlignQueryDataSet.write(output);
    output.writeFieldEnd();
  }
  if (this.columnNameIndexMap !== null && this.columnNameIndexMap !== undefined) {
    output.writeFieldBegin('columnNameIndexMap', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.columnNameIndexMap));
    for (var kiter57 in this.columnNameIndexMap) {
      if (this.columnNameIndexMap.hasOwnProperty(kiter57)) {
        var viter58 = this.columnNameIndexMap[kiter57];
        output.writeString(kiter57);
        output.writeI32(viter58);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sgColumns !== null && this.sgColumns !== undefined) {
    output.writeFieldBegin('sgColumns', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.sgColumns.length);
    for (var iter59 in this.sgColumns) {
      if (this.sgColumns.hasOwnProperty(iter59)) {
        iter59 = this.sgColumns[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aliasColumns !== null && this.aliasColumns !== undefined) {
    output.writeFieldBegin('aliasColumns', Thrift.Type.STRING, 11);
    output.writeBinary(this.aliasColumns);
    output.writeFieldEnd();
  }
  if (this.tracingInfo !== null && this.tracingInfo !== undefined) {
    output.writeFieldBegin('tracingInfo', Thrift.Type.STRUCT, 12);
    this.tracingInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.queryResult !== null && this.queryResult !== undefined) {
    output.writeFieldBegin('queryResult', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.queryResult.length);
    for (var iter60 in this.queryResult) {
      if (this.queryResult.hasOwnProperty(iter60)) {
        iter60 = this.queryResult[iter60];
        output.writeBinary(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.moreData !== null && this.moreData !== undefined) {
    output.writeFieldBegin('moreData', Thrift.Type.BOOL, 14);
    output.writeBool(this.moreData);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 15);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.tableModel !== null && this.tableModel !== undefined) {
    output.writeFieldBegin('tableModel', Thrift.Type.BOOL, 16);
    output.writeBool(this.tableModel);
    output.writeFieldEnd();
  }
  if (this.columnIndex2TsBlockColumnIndexList !== null && this.columnIndex2TsBlockColumnIndexList !== undefined) {
    output.writeFieldBegin('columnIndex2TsBlockColumnIndexList', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.I32, this.columnIndex2TsBlockColumnIndexList.length);
    for (var iter61 in this.columnIndex2TsBlockColumnIndexList) {
      if (this.columnIndex2TsBlockColumnIndexList.hasOwnProperty(iter61)) {
        iter61 = this.columnIndex2TsBlockColumnIndexList[iter61];
        output.writeI32(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSOpenSessionResp = module.exports.TSOpenSessionResp = function(args) {
  this.status = null;
  this.serverProtocolVersion = 0;
  this.sessionId = null;
  this.configuration = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.serverProtocolVersion !== undefined && args.serverProtocolVersion !== null) {
      this.serverProtocolVersion = args.serverProtocolVersion;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverProtocolVersion is unset!');
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
  }
};
TSOpenSessionResp.prototype = {};
TSOpenSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocolVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp363 = input.readMapBegin();
        var _size62 = _rtmp363.size || 0;
        for (var _i64 = 0; _i64 < _size62; ++_i64) {
          var key65 = null;
          var val66 = null;
          key65 = input.readString();
          val66 = input.readString();
          this.configuration[key65] = val66;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSOpenSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TSOpenSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.serverProtocolVersion !== null && this.serverProtocolVersion !== undefined) {
    output.writeFieldBegin('serverProtocolVersion', Thrift.Type.I32, 2);
    output.writeI32(this.serverProtocolVersion);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 3);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter67 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter67)) {
        var viter68 = this.configuration[kiter67];
        output.writeString(kiter67);
        output.writeString(viter68);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSOpenSessionReq = module.exports.TSOpenSessionReq = function(args) {
  this.client_protocol = 2;
  this.zoneId = null;
  this.username = null;
  this.password = null;
  this.configuration = null;
  if (args) {
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field client_protocol is unset!');
    }
    if (args.zoneId !== undefined && args.zoneId !== null) {
      this.zoneId = args.zoneId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field zoneId is unset!');
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
  }
};
TSOpenSessionReq.prototype = {};
TSOpenSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.zoneId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp370 = input.readMapBegin();
        var _size69 = _rtmp370.size || 0;
        for (var _i71 = 0; _i71 < _size69; ++_i71) {
          var key72 = null;
          var val73 = null;
          key72 = input.readString();
          val73 = input.readString();
          this.configuration[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSOpenSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TSOpenSessionReq');
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 1);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.zoneId !== null && this.zoneId !== undefined) {
    output.writeFieldBegin('zoneId', Thrift.Type.STRING, 2);
    output.writeString(this.zoneId);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter74 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter74)) {
        var viter75 = this.configuration[kiter74];
        output.writeString(kiter74);
        output.writeString(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCloseSessionReq = module.exports.TSCloseSessionReq = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
  }
};
TSCloseSessionReq.prototype = {};
TSCloseSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCloseSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TSCloseSessionReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSExecuteStatementReq = module.exports.TSExecuteStatementReq = function(args) {
  this.sessionId = null;
  this.statement = null;
  this.statementId = null;
  this.fetchSize = null;
  this.timeout = null;
  this.enableRedirectQuery = null;
  this.jdbcQuery = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
    if (args.enableRedirectQuery !== undefined && args.enableRedirectQuery !== null) {
      this.enableRedirectQuery = args.enableRedirectQuery;
    }
    if (args.jdbcQuery !== undefined && args.jdbcQuery !== null) {
      this.jdbcQuery = args.jdbcQuery;
    }
  }
};
TSExecuteStatementReq.prototype = {};
TSExecuteStatementReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableRedirectQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.jdbcQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSExecuteStatementReq.prototype.write = function(output) {
  output.writeStructBegin('TSExecuteStatementReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 3);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 4);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 5);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.enableRedirectQuery !== null && this.enableRedirectQuery !== undefined) {
    output.writeFieldBegin('enableRedirectQuery', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableRedirectQuery);
    output.writeFieldEnd();
  }
  if (this.jdbcQuery !== null && this.jdbcQuery !== undefined) {
    output.writeFieldBegin('jdbcQuery', Thrift.Type.BOOL, 7);
    output.writeBool(this.jdbcQuery);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSExecuteBatchStatementReq = module.exports.TSExecuteBatchStatementReq = function(args) {
  this.sessionId = null;
  this.statements = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statements !== undefined && args.statements !== null) {
      this.statements = Thrift.copyList(args.statements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statements is unset!');
    }
  }
};
TSExecuteBatchStatementReq.prototype = {};
TSExecuteBatchStatementReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.statements = [];
        var _rtmp377 = input.readListBegin();
        var _size76 = _rtmp377.size || 0;
        for (var _i78 = 0; _i78 < _size76; ++_i78) {
          var elem79 = null;
          elem79 = input.readString();
          this.statements.push(elem79);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSExecuteBatchStatementReq.prototype.write = function(output) {
  output.writeStructBegin('TSExecuteBatchStatementReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statements !== null && this.statements !== undefined) {
    output.writeFieldBegin('statements', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.statements.length);
    for (var iter80 in this.statements) {
      if (this.statements.hasOwnProperty(iter80)) {
        iter80 = this.statements[iter80];
        output.writeString(iter80);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSGetOperationStatusReq = module.exports.TSGetOperationStatusReq = function(args) {
  this.sessionId = null;
  this.queryId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryId is unset!');
    }
  }
};
TSGetOperationStatusReq.prototype = {};
TSGetOperationStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSGetOperationStatusReq.prototype.write = function(output) {
  output.writeStructBegin('TSGetOperationStatusReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 2);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCancelOperationReq = module.exports.TSCancelOperationReq = function(args) {
  this.sessionId = null;
  this.queryId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryId is unset!');
    }
  }
};
TSCancelOperationReq.prototype = {};
TSCancelOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCancelOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TSCancelOperationReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 2);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCloseOperationReq = module.exports.TSCloseOperationReq = function(args) {
  this.sessionId = null;
  this.queryId = null;
  this.statementId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    }
  }
};
TSCloseOperationReq.prototype = {};
TSCloseOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCloseOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TSCloseOperationReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 2);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 3);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSFetchResultsReq = module.exports.TSFetchResultsReq = function(args) {
  this.sessionId = null;
  this.statement = null;
  this.fetchSize = null;
  this.queryId = null;
  this.isAlign = null;
  this.timeout = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fetchSize is unset!');
    }
    if (args.queryId !== undefined && args.queryId !== null) {
      this.queryId = args.queryId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryId is unset!');
    }
    if (args.isAlign !== undefined && args.isAlign !== null) {
      this.isAlign = args.isAlign;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isAlign is unset!');
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
TSFetchResultsReq.prototype = {};
TSFetchResultsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.queryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isAlign = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSFetchResultsReq.prototype.write = function(output) {
  output.writeStructBegin('TSFetchResultsReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 3);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.queryId !== null && this.queryId !== undefined) {
    output.writeFieldBegin('queryId', Thrift.Type.I64, 4);
    output.writeI64(this.queryId);
    output.writeFieldEnd();
  }
  if (this.isAlign !== null && this.isAlign !== undefined) {
    output.writeFieldBegin('isAlign', Thrift.Type.BOOL, 5);
    output.writeBool(this.isAlign);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 6);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSFetchResultsResp = module.exports.TSFetchResultsResp = function(args) {
  this.status = null;
  this.hasResultSet = null;
  this.isAlign = null;
  this.queryDataSet = null;
  this.nonAlignQueryDataSet = null;
  this.queryResult = null;
  this.moreData = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.hasResultSet !== undefined && args.hasResultSet !== null) {
      this.hasResultSet = args.hasResultSet;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasResultSet is unset!');
    }
    if (args.isAlign !== undefined && args.isAlign !== null) {
      this.isAlign = args.isAlign;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isAlign is unset!');
    }
    if (args.queryDataSet !== undefined && args.queryDataSet !== null) {
      this.queryDataSet = new ttypes.TSQueryDataSet(args.queryDataSet);
    }
    if (args.nonAlignQueryDataSet !== undefined && args.nonAlignQueryDataSet !== null) {
      this.nonAlignQueryDataSet = new ttypes.TSQueryNonAlignDataSet(args.nonAlignQueryDataSet);
    }
    if (args.queryResult !== undefined && args.queryResult !== null) {
      this.queryResult = Thrift.copyList(args.queryResult, [null]);
    }
    if (args.moreData !== undefined && args.moreData !== null) {
      this.moreData = args.moreData;
    }
  }
};
TSFetchResultsResp.prototype = {};
TSFetchResultsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isAlign = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryDataSet = new ttypes.TSQueryDataSet();
        this.queryDataSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.nonAlignQueryDataSet = new ttypes.TSQueryNonAlignDataSet();
        this.nonAlignQueryDataSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.queryResult = [];
        var _rtmp382 = input.readListBegin();
        var _size81 = _rtmp382.size || 0;
        for (var _i83 = 0; _i83 < _size81; ++_i83) {
          var elem84 = null;
          elem84 = input.readBinary();
          this.queryResult.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.moreData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSFetchResultsResp.prototype.write = function(output) {
  output.writeStructBegin('TSFetchResultsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.isAlign !== null && this.isAlign !== undefined) {
    output.writeFieldBegin('isAlign', Thrift.Type.BOOL, 3);
    output.writeBool(this.isAlign);
    output.writeFieldEnd();
  }
  if (this.queryDataSet !== null && this.queryDataSet !== undefined) {
    output.writeFieldBegin('queryDataSet', Thrift.Type.STRUCT, 4);
    this.queryDataSet.write(output);
    output.writeFieldEnd();
  }
  if (this.nonAlignQueryDataSet !== null && this.nonAlignQueryDataSet !== undefined) {
    output.writeFieldBegin('nonAlignQueryDataSet', Thrift.Type.STRUCT, 5);
    this.nonAlignQueryDataSet.write(output);
    output.writeFieldEnd();
  }
  if (this.queryResult !== null && this.queryResult !== undefined) {
    output.writeFieldBegin('queryResult', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.queryResult.length);
    for (var iter85 in this.queryResult) {
      if (this.queryResult.hasOwnProperty(iter85)) {
        iter85 = this.queryResult[iter85];
        output.writeBinary(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.moreData !== null && this.moreData !== undefined) {
    output.writeFieldBegin('moreData', Thrift.Type.BOOL, 7);
    output.writeBool(this.moreData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSFetchMetadataResp = module.exports.TSFetchMetadataResp = function(args) {
  this.status = null;
  this.metadataInJson = null;
  this.columnsList = null;
  this.dataType = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.metadataInJson !== undefined && args.metadataInJson !== null) {
      this.metadataInJson = args.metadataInJson;
    }
    if (args.columnsList !== undefined && args.columnsList !== null) {
      this.columnsList = Thrift.copyList(args.columnsList, [null]);
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    }
  }
};
TSFetchMetadataResp.prototype = {};
TSFetchMetadataResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.metadataInJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columnsList = [];
        var _rtmp387 = input.readListBegin();
        var _size86 = _rtmp387.size || 0;
        for (var _i88 = 0; _i88 < _size86; ++_i88) {
          var elem89 = null;
          elem89 = input.readString();
          this.columnsList.push(elem89);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSFetchMetadataResp.prototype.write = function(output) {
  output.writeStructBegin('TSFetchMetadataResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.metadataInJson !== null && this.metadataInJson !== undefined) {
    output.writeFieldBegin('metadataInJson', Thrift.Type.STRING, 2);
    output.writeString(this.metadataInJson);
    output.writeFieldEnd();
  }
  if (this.columnsList !== null && this.columnsList !== undefined) {
    output.writeFieldBegin('columnsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columnsList.length);
    for (var iter90 in this.columnsList) {
      if (this.columnsList.hasOwnProperty(iter90)) {
        iter90 = this.columnsList[iter90];
        output.writeString(iter90);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRING, 4);
    output.writeString(this.dataType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSFetchMetadataReq = module.exports.TSFetchMetadataReq = function(args) {
  this.sessionId = null;
  this.type = null;
  this.columnPath = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.columnPath !== undefined && args.columnPath !== null) {
      this.columnPath = args.columnPath;
    }
  }
};
TSFetchMetadataReq.prototype = {};
TSFetchMetadataReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSFetchMetadataReq.prototype.write = function(output) {
  output.writeStructBegin('TSFetchMetadataReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.columnPath !== null && this.columnPath !== undefined) {
    output.writeFieldBegin('columnPath', Thrift.Type.STRING, 3);
    output.writeString(this.columnPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSGetTimeZoneResp = module.exports.TSGetTimeZoneResp = function(args) {
  this.status = null;
  this.timeZone = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timeZone is unset!');
    }
  }
};
TSGetTimeZoneResp.prototype = {};
TSGetTimeZoneResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSGetTimeZoneResp.prototype.write = function(output) {
  output.writeStructBegin('TSGetTimeZoneResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 2);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSSetTimeZoneReq = module.exports.TSSetTimeZoneReq = function(args) {
  this.sessionId = null;
  this.timeZone = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timeZone is unset!');
    }
  }
};
TSSetTimeZoneReq.prototype = {};
TSSetTimeZoneReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSSetTimeZoneReq.prototype.write = function(output) {
  output.writeStructBegin('TSSetTimeZoneReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 2);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertRecordReq = module.exports.TSInsertRecordReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurements = null;
  this.values = null;
  this.timestamp = null;
  this.isAligned = null;
  this.isWriteToTable = null;
  this.columnCategoryies = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
    if (args.isWriteToTable !== undefined && args.isWriteToTable !== null) {
      this.isWriteToTable = args.isWriteToTable;
    }
    if (args.columnCategoryies !== undefined && args.columnCategoryies !== null) {
      this.columnCategoryies = args.columnCategoryies;
    }
  }
};
TSInsertRecordReq.prototype = {};
TSInsertRecordReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp392 = input.readListBegin();
        var _size91 = _rtmp392.size || 0;
        for (var _i93 = 0; _i93 < _size91; ++_i93) {
          var elem94 = null;
          elem94 = input.readString();
          this.measurements.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.values = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isWriteToTable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.columnCategoryies = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertRecordReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertRecordReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter95 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter95)) {
        iter95 = this.measurements[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.STRING, 4);
    output.writeBinary(this.values);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  if (this.isWriteToTable !== null && this.isWriteToTable !== undefined) {
    output.writeFieldBegin('isWriteToTable', Thrift.Type.BOOL, 7);
    output.writeBool(this.isWriteToTable);
    output.writeFieldEnd();
  }
  if (this.columnCategoryies !== null && this.columnCategoryies !== undefined) {
    output.writeFieldBegin('columnCategoryies', Thrift.Type.STRING, 8);
    output.writeBinary(this.columnCategoryies);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertStringRecordReq = module.exports.TSInsertStringRecordReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurements = null;
  this.values = null;
  this.timestamp = null;
  this.isAligned = null;
  this.timeout = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
TSInsertStringRecordReq.prototype = {};
TSInsertStringRecordReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp397 = input.readListBegin();
        var _size96 = _rtmp397.size || 0;
        for (var _i98 = 0; _i98 < _size96; ++_i98) {
          var elem99 = null;
          elem99 = input.readString();
          this.measurements.push(elem99);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.values = [];
        var _rtmp3101 = input.readListBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var elem103 = null;
          elem103 = input.readString();
          this.values.push(elem103);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertStringRecordReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertStringRecordReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter104 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter104)) {
        iter104 = this.measurements[iter104];
        output.writeString(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter105 in this.values) {
      if (this.values.hasOwnProperty(iter105)) {
        iter105 = this.values[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 7);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertTabletReq = module.exports.TSInsertTabletReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurements = null;
  this.values = null;
  this.timestamps = null;
  this.types = null;
  this.size = null;
  this.isAligned = null;
  this.writeToTable = null;
  this.columnCategories = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = args.timestamps;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamps is unset!');
    }
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field types is unset!');
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field size is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
    if (args.writeToTable !== undefined && args.writeToTable !== null) {
      this.writeToTable = args.writeToTable;
    }
    if (args.columnCategories !== undefined && args.columnCategories !== null) {
      this.columnCategories = args.columnCategories;
    }
  }
};
TSInsertTabletReq.prototype = {};
TSInsertTabletReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp3107 = input.readListBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var elem109 = null;
          elem109 = input.readString();
          this.measurements.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.values = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.timestamps = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.types = [];
        var _rtmp3111 = input.readListBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          var elem113 = null;
          elem113 = input.readI32();
          this.types.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.writeToTable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.columnCategories = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertTabletReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertTabletReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter114 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter114)) {
        iter114 = this.measurements[iter114];
        output.writeString(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.STRING, 4);
    output.writeBinary(this.values);
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.STRING, 5);
    output.writeBinary(this.timestamps);
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.types.length);
    for (var iter115 in this.types) {
      if (this.types.hasOwnProperty(iter115)) {
        iter115 = this.types[iter115];
        output.writeI32(iter115);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 7);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 8);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  if (this.writeToTable !== null && this.writeToTable !== undefined) {
    output.writeFieldBegin('writeToTable', Thrift.Type.BOOL, 9);
    output.writeBool(this.writeToTable);
    output.writeFieldEnd();
  }
  if (this.columnCategories !== null && this.columnCategories !== undefined) {
    output.writeFieldBegin('columnCategories', Thrift.Type.STRING, 10);
    output.writeBinary(this.columnCategories);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertTabletsReq = module.exports.TSInsertTabletsReq = function(args) {
  this.sessionId = null;
  this.prefixPaths = null;
  this.measurementsList = null;
  this.valuesList = null;
  this.timestampsList = null;
  this.typesList = null;
  this.sizeList = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPaths !== undefined && args.prefixPaths !== null) {
      this.prefixPaths = Thrift.copyList(args.prefixPaths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPaths is unset!');
    }
    if (args.measurementsList !== undefined && args.measurementsList !== null) {
      this.measurementsList = Thrift.copyList(args.measurementsList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurementsList is unset!');
    }
    if (args.valuesList !== undefined && args.valuesList !== null) {
      this.valuesList = Thrift.copyList(args.valuesList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valuesList is unset!');
    }
    if (args.timestampsList !== undefined && args.timestampsList !== null) {
      this.timestampsList = Thrift.copyList(args.timestampsList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestampsList is unset!');
    }
    if (args.typesList !== undefined && args.typesList !== null) {
      this.typesList = Thrift.copyList(args.typesList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typesList is unset!');
    }
    if (args.sizeList !== undefined && args.sizeList !== null) {
      this.sizeList = Thrift.copyList(args.sizeList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sizeList is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertTabletsReq.prototype = {};
TSInsertTabletsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.prefixPaths = [];
        var _rtmp3117 = input.readListBegin();
        var _size116 = _rtmp3117.size || 0;
        for (var _i118 = 0; _i118 < _size116; ++_i118) {
          var elem119 = null;
          elem119 = input.readString();
          this.prefixPaths.push(elem119);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurementsList = [];
        var _rtmp3121 = input.readListBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var elem123 = null;
          elem123 = [];
          var _rtmp3125 = input.readListBegin();
          var _size124 = _rtmp3125.size || 0;
          for (var _i126 = 0; _i126 < _size124; ++_i126) {
            var elem127 = null;
            elem127 = input.readString();
            elem123.push(elem127);
          }
          input.readListEnd();
          this.measurementsList.push(elem123);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.valuesList = [];
        var _rtmp3129 = input.readListBegin();
        var _size128 = _rtmp3129.size || 0;
        for (var _i130 = 0; _i130 < _size128; ++_i130) {
          var elem131 = null;
          elem131 = input.readBinary();
          this.valuesList.push(elem131);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.timestampsList = [];
        var _rtmp3133 = input.readListBegin();
        var _size132 = _rtmp3133.size || 0;
        for (var _i134 = 0; _i134 < _size132; ++_i134) {
          var elem135 = null;
          elem135 = input.readBinary();
          this.timestampsList.push(elem135);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.typesList = [];
        var _rtmp3137 = input.readListBegin();
        var _size136 = _rtmp3137.size || 0;
        for (var _i138 = 0; _i138 < _size136; ++_i138) {
          var elem139 = null;
          elem139 = [];
          var _rtmp3141 = input.readListBegin();
          var _size140 = _rtmp3141.size || 0;
          for (var _i142 = 0; _i142 < _size140; ++_i142) {
            var elem143 = null;
            elem143 = input.readI32();
            elem139.push(elem143);
          }
          input.readListEnd();
          this.typesList.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.sizeList = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = input.readI32();
          this.sizeList.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertTabletsReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertTabletsReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPaths !== null && this.prefixPaths !== undefined) {
    output.writeFieldBegin('prefixPaths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.prefixPaths.length);
    for (var iter148 in this.prefixPaths) {
      if (this.prefixPaths.hasOwnProperty(iter148)) {
        iter148 = this.prefixPaths[iter148];
        output.writeString(iter148);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.measurementsList !== null && this.measurementsList !== undefined) {
    output.writeFieldBegin('measurementsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.measurementsList.length);
    for (var iter149 in this.measurementsList) {
      if (this.measurementsList.hasOwnProperty(iter149)) {
        iter149 = this.measurementsList[iter149];
        output.writeListBegin(Thrift.Type.STRING, iter149.length);
        for (var iter150 in iter149) {
          if (iter149.hasOwnProperty(iter150)) {
            iter150 = iter149[iter150];
            output.writeString(iter150);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valuesList !== null && this.valuesList !== undefined) {
    output.writeFieldBegin('valuesList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.valuesList.length);
    for (var iter151 in this.valuesList) {
      if (this.valuesList.hasOwnProperty(iter151)) {
        iter151 = this.valuesList[iter151];
        output.writeBinary(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestampsList !== null && this.timestampsList !== undefined) {
    output.writeFieldBegin('timestampsList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.timestampsList.length);
    for (var iter152 in this.timestampsList) {
      if (this.timestampsList.hasOwnProperty(iter152)) {
        iter152 = this.timestampsList[iter152];
        output.writeBinary(iter152);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.typesList !== null && this.typesList !== undefined) {
    output.writeFieldBegin('typesList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.LIST, this.typesList.length);
    for (var iter153 in this.typesList) {
      if (this.typesList.hasOwnProperty(iter153)) {
        iter153 = this.typesList[iter153];
        output.writeListBegin(Thrift.Type.I32, iter153.length);
        for (var iter154 in iter153) {
          if (iter153.hasOwnProperty(iter154)) {
            iter154 = iter153[iter154];
            output.writeI32(iter154);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sizeList !== null && this.sizeList !== undefined) {
    output.writeFieldBegin('sizeList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.sizeList.length);
    for (var iter155 in this.sizeList) {
      if (this.sizeList.hasOwnProperty(iter155)) {
        iter155 = this.sizeList[iter155];
        output.writeI32(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 8);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertRecordsReq = module.exports.TSInsertRecordsReq = function(args) {
  this.sessionId = null;
  this.prefixPaths = null;
  this.measurementsList = null;
  this.valuesList = null;
  this.timestamps = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPaths !== undefined && args.prefixPaths !== null) {
      this.prefixPaths = Thrift.copyList(args.prefixPaths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPaths is unset!');
    }
    if (args.measurementsList !== undefined && args.measurementsList !== null) {
      this.measurementsList = Thrift.copyList(args.measurementsList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurementsList is unset!');
    }
    if (args.valuesList !== undefined && args.valuesList !== null) {
      this.valuesList = Thrift.copyList(args.valuesList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valuesList is unset!');
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamps is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertRecordsReq.prototype = {};
TSInsertRecordsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.prefixPaths = [];
        var _rtmp3157 = input.readListBegin();
        var _size156 = _rtmp3157.size || 0;
        for (var _i158 = 0; _i158 < _size156; ++_i158) {
          var elem159 = null;
          elem159 = input.readString();
          this.prefixPaths.push(elem159);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurementsList = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = [];
          var _rtmp3165 = input.readListBegin();
          var _size164 = _rtmp3165.size || 0;
          for (var _i166 = 0; _i166 < _size164; ++_i166) {
            var elem167 = null;
            elem167 = input.readString();
            elem163.push(elem167);
          }
          input.readListEnd();
          this.measurementsList.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.valuesList = [];
        var _rtmp3169 = input.readListBegin();
        var _size168 = _rtmp3169.size || 0;
        for (var _i170 = 0; _i170 < _size168; ++_i170) {
          var elem171 = null;
          elem171 = input.readBinary();
          this.valuesList.push(elem171);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp3173 = input.readListBegin();
        var _size172 = _rtmp3173.size || 0;
        for (var _i174 = 0; _i174 < _size172; ++_i174) {
          var elem175 = null;
          elem175 = input.readI64();
          this.timestamps.push(elem175);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertRecordsReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertRecordsReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPaths !== null && this.prefixPaths !== undefined) {
    output.writeFieldBegin('prefixPaths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.prefixPaths.length);
    for (var iter176 in this.prefixPaths) {
      if (this.prefixPaths.hasOwnProperty(iter176)) {
        iter176 = this.prefixPaths[iter176];
        output.writeString(iter176);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.measurementsList !== null && this.measurementsList !== undefined) {
    output.writeFieldBegin('measurementsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.measurementsList.length);
    for (var iter177 in this.measurementsList) {
      if (this.measurementsList.hasOwnProperty(iter177)) {
        iter177 = this.measurementsList[iter177];
        output.writeListBegin(Thrift.Type.STRING, iter177.length);
        for (var iter178 in iter177) {
          if (iter177.hasOwnProperty(iter178)) {
            iter178 = iter177[iter178];
            output.writeString(iter178);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valuesList !== null && this.valuesList !== undefined) {
    output.writeFieldBegin('valuesList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.valuesList.length);
    for (var iter179 in this.valuesList) {
      if (this.valuesList.hasOwnProperty(iter179)) {
        iter179 = this.valuesList[iter179];
        output.writeBinary(iter179);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter180 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter180)) {
        iter180 = this.timestamps[iter180];
        output.writeI64(iter180);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertRecordsOfOneDeviceReq = module.exports.TSInsertRecordsOfOneDeviceReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurementsList = null;
  this.valuesList = null;
  this.timestamps = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurementsList !== undefined && args.measurementsList !== null) {
      this.measurementsList = Thrift.copyList(args.measurementsList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurementsList is unset!');
    }
    if (args.valuesList !== undefined && args.valuesList !== null) {
      this.valuesList = Thrift.copyList(args.valuesList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valuesList is unset!');
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamps is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertRecordsOfOneDeviceReq.prototype = {};
TSInsertRecordsOfOneDeviceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurementsList = [];
        var _rtmp3182 = input.readListBegin();
        var _size181 = _rtmp3182.size || 0;
        for (var _i183 = 0; _i183 < _size181; ++_i183) {
          var elem184 = null;
          elem184 = [];
          var _rtmp3186 = input.readListBegin();
          var _size185 = _rtmp3186.size || 0;
          for (var _i187 = 0; _i187 < _size185; ++_i187) {
            var elem188 = null;
            elem188 = input.readString();
            elem184.push(elem188);
          }
          input.readListEnd();
          this.measurementsList.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.valuesList = [];
        var _rtmp3190 = input.readListBegin();
        var _size189 = _rtmp3190.size || 0;
        for (var _i191 = 0; _i191 < _size189; ++_i191) {
          var elem192 = null;
          elem192 = input.readBinary();
          this.valuesList.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp3194 = input.readListBegin();
        var _size193 = _rtmp3194.size || 0;
        for (var _i195 = 0; _i195 < _size193; ++_i195) {
          var elem196 = null;
          elem196 = input.readI64();
          this.timestamps.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertRecordsOfOneDeviceReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertRecordsOfOneDeviceReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurementsList !== null && this.measurementsList !== undefined) {
    output.writeFieldBegin('measurementsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.measurementsList.length);
    for (var iter197 in this.measurementsList) {
      if (this.measurementsList.hasOwnProperty(iter197)) {
        iter197 = this.measurementsList[iter197];
        output.writeListBegin(Thrift.Type.STRING, iter197.length);
        for (var iter198 in iter197) {
          if (iter197.hasOwnProperty(iter198)) {
            iter198 = iter197[iter198];
            output.writeString(iter198);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valuesList !== null && this.valuesList !== undefined) {
    output.writeFieldBegin('valuesList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.valuesList.length);
    for (var iter199 in this.valuesList) {
      if (this.valuesList.hasOwnProperty(iter199)) {
        iter199 = this.valuesList[iter199];
        output.writeBinary(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter200 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter200)) {
        iter200 = this.timestamps[iter200];
        output.writeI64(iter200);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertStringRecordsOfOneDeviceReq = module.exports.TSInsertStringRecordsOfOneDeviceReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurementsList = null;
  this.valuesList = null;
  this.timestamps = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurementsList !== undefined && args.measurementsList !== null) {
      this.measurementsList = Thrift.copyList(args.measurementsList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurementsList is unset!');
    }
    if (args.valuesList !== undefined && args.valuesList !== null) {
      this.valuesList = Thrift.copyList(args.valuesList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valuesList is unset!');
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamps is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertStringRecordsOfOneDeviceReq.prototype = {};
TSInsertStringRecordsOfOneDeviceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurementsList = [];
        var _rtmp3202 = input.readListBegin();
        var _size201 = _rtmp3202.size || 0;
        for (var _i203 = 0; _i203 < _size201; ++_i203) {
          var elem204 = null;
          elem204 = [];
          var _rtmp3206 = input.readListBegin();
          var _size205 = _rtmp3206.size || 0;
          for (var _i207 = 0; _i207 < _size205; ++_i207) {
            var elem208 = null;
            elem208 = input.readString();
            elem204.push(elem208);
          }
          input.readListEnd();
          this.measurementsList.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.valuesList = [];
        var _rtmp3210 = input.readListBegin();
        var _size209 = _rtmp3210.size || 0;
        for (var _i211 = 0; _i211 < _size209; ++_i211) {
          var elem212 = null;
          elem212 = [];
          var _rtmp3214 = input.readListBegin();
          var _size213 = _rtmp3214.size || 0;
          for (var _i215 = 0; _i215 < _size213; ++_i215) {
            var elem216 = null;
            elem216 = input.readString();
            elem212.push(elem216);
          }
          input.readListEnd();
          this.valuesList.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp3218 = input.readListBegin();
        var _size217 = _rtmp3218.size || 0;
        for (var _i219 = 0; _i219 < _size217; ++_i219) {
          var elem220 = null;
          elem220 = input.readI64();
          this.timestamps.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertStringRecordsOfOneDeviceReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertStringRecordsOfOneDeviceReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurementsList !== null && this.measurementsList !== undefined) {
    output.writeFieldBegin('measurementsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.measurementsList.length);
    for (var iter221 in this.measurementsList) {
      if (this.measurementsList.hasOwnProperty(iter221)) {
        iter221 = this.measurementsList[iter221];
        output.writeListBegin(Thrift.Type.STRING, iter221.length);
        for (var iter222 in iter221) {
          if (iter221.hasOwnProperty(iter222)) {
            iter222 = iter221[iter222];
            output.writeString(iter222);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valuesList !== null && this.valuesList !== undefined) {
    output.writeFieldBegin('valuesList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.valuesList.length);
    for (var iter223 in this.valuesList) {
      if (this.valuesList.hasOwnProperty(iter223)) {
        iter223 = this.valuesList[iter223];
        output.writeListBegin(Thrift.Type.STRING, iter223.length);
        for (var iter224 in iter223) {
          if (iter223.hasOwnProperty(iter224)) {
            iter224 = iter223[iter224];
            output.writeString(iter224);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter225 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter225)) {
        iter225 = this.timestamps[iter225];
        output.writeI64(iter225);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSInsertStringRecordsReq = module.exports.TSInsertStringRecordsReq = function(args) {
  this.sessionId = null;
  this.prefixPaths = null;
  this.measurementsList = null;
  this.valuesList = null;
  this.timestamps = null;
  this.isAligned = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPaths !== undefined && args.prefixPaths !== null) {
      this.prefixPaths = Thrift.copyList(args.prefixPaths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPaths is unset!');
    }
    if (args.measurementsList !== undefined && args.measurementsList !== null) {
      this.measurementsList = Thrift.copyList(args.measurementsList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurementsList is unset!');
    }
    if (args.valuesList !== undefined && args.valuesList !== null) {
      this.valuesList = Thrift.copyList(args.valuesList, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valuesList is unset!');
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamps is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    }
  }
};
TSInsertStringRecordsReq.prototype = {};
TSInsertStringRecordsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.prefixPaths = [];
        var _rtmp3227 = input.readListBegin();
        var _size226 = _rtmp3227.size || 0;
        for (var _i228 = 0; _i228 < _size226; ++_i228) {
          var elem229 = null;
          elem229 = input.readString();
          this.prefixPaths.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurementsList = [];
        var _rtmp3231 = input.readListBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var elem233 = null;
          elem233 = [];
          var _rtmp3235 = input.readListBegin();
          var _size234 = _rtmp3235.size || 0;
          for (var _i236 = 0; _i236 < _size234; ++_i236) {
            var elem237 = null;
            elem237 = input.readString();
            elem233.push(elem237);
          }
          input.readListEnd();
          this.measurementsList.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.valuesList = [];
        var _rtmp3239 = input.readListBegin();
        var _size238 = _rtmp3239.size || 0;
        for (var _i240 = 0; _i240 < _size238; ++_i240) {
          var elem241 = null;
          elem241 = [];
          var _rtmp3243 = input.readListBegin();
          var _size242 = _rtmp3243.size || 0;
          for (var _i244 = 0; _i244 < _size242; ++_i244) {
            var elem245 = null;
            elem245 = input.readString();
            elem241.push(elem245);
          }
          input.readListEnd();
          this.valuesList.push(elem241);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp3247 = input.readListBegin();
        var _size246 = _rtmp3247.size || 0;
        for (var _i248 = 0; _i248 < _size246; ++_i248) {
          var elem249 = null;
          elem249 = input.readI64();
          this.timestamps.push(elem249);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSInsertStringRecordsReq.prototype.write = function(output) {
  output.writeStructBegin('TSInsertStringRecordsReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPaths !== null && this.prefixPaths !== undefined) {
    output.writeFieldBegin('prefixPaths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.prefixPaths.length);
    for (var iter250 in this.prefixPaths) {
      if (this.prefixPaths.hasOwnProperty(iter250)) {
        iter250 = this.prefixPaths[iter250];
        output.writeString(iter250);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.measurementsList !== null && this.measurementsList !== undefined) {
    output.writeFieldBegin('measurementsList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.measurementsList.length);
    for (var iter251 in this.measurementsList) {
      if (this.measurementsList.hasOwnProperty(iter251)) {
        iter251 = this.measurementsList[iter251];
        output.writeListBegin(Thrift.Type.STRING, iter251.length);
        for (var iter252 in iter251) {
          if (iter251.hasOwnProperty(iter252)) {
            iter252 = iter251[iter252];
            output.writeString(iter252);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.valuesList !== null && this.valuesList !== undefined) {
    output.writeFieldBegin('valuesList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.valuesList.length);
    for (var iter253 in this.valuesList) {
      if (this.valuesList.hasOwnProperty(iter253)) {
        iter253 = this.valuesList[iter253];
        output.writeListBegin(Thrift.Type.STRING, iter253.length);
        for (var iter254 in iter253) {
          if (iter253.hasOwnProperty(iter254)) {
            iter254 = iter253[iter254];
            output.writeString(iter254);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter255 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter255)) {
        iter255 = this.timestamps[iter255];
        output.writeI64(iter255);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSDeleteDataReq = module.exports.TSDeleteDataReq = function(args) {
  this.sessionId = null;
  this.paths = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field paths is unset!');
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field endTime is unset!');
    }
  }
};
TSDeleteDataReq.prototype = {};
TSDeleteDataReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.paths = [];
        var _rtmp3257 = input.readListBegin();
        var _size256 = _rtmp3257.size || 0;
        for (var _i258 = 0; _i258 < _size256; ++_i258) {
          var elem259 = null;
          elem259 = input.readString();
          this.paths.push(elem259);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSDeleteDataReq.prototype.write = function(output) {
  output.writeStructBegin('TSDeleteDataReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter260 in this.paths) {
      if (this.paths.hasOwnProperty(iter260)) {
        iter260 = this.paths[iter260];
        output.writeString(iter260);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 4);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCreateTimeseriesReq = module.exports.TSCreateTimeseriesReq = function(args) {
  this.sessionId = null;
  this.path = null;
  this.dataType = null;
  this.encoding = null;
  this.compressor = null;
  this.props = null;
  this.tags = null;
  this.attributes = null;
  this.measurementAlias = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataType is unset!');
    }
    if (args.encoding !== undefined && args.encoding !== null) {
      this.encoding = args.encoding;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field encoding is unset!');
    }
    if (args.compressor !== undefined && args.compressor !== null) {
      this.compressor = args.compressor;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compressor is unset!');
    }
    if (args.props !== undefined && args.props !== null) {
      this.props = Thrift.copyMap(args.props, [null]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyMap(args.tags, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.measurementAlias !== undefined && args.measurementAlias !== null) {
      this.measurementAlias = args.measurementAlias;
    }
  }
};
TSCreateTimeseriesReq.prototype = {};
TSCreateTimeseriesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dataType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.compressor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.props = {};
        var _rtmp3262 = input.readMapBegin();
        var _size261 = _rtmp3262.size || 0;
        for (var _i263 = 0; _i263 < _size261; ++_i263) {
          var key264 = null;
          var val265 = null;
          key264 = input.readString();
          val265 = input.readString();
          this.props[key264] = val265;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.tags = {};
        var _rtmp3267 = input.readMapBegin();
        var _size266 = _rtmp3267.size || 0;
        for (var _i268 = 0; _i268 < _size266; ++_i268) {
          var key269 = null;
          var val270 = null;
          key269 = input.readString();
          val270 = input.readString();
          this.tags[key269] = val270;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3272 = input.readMapBegin();
        var _size271 = _rtmp3272.size || 0;
        for (var _i273 = 0; _i273 < _size271; ++_i273) {
          var key274 = null;
          var val275 = null;
          key274 = input.readString();
          val275 = input.readString();
          this.attributes[key274] = val275;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.measurementAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCreateTimeseriesReq.prototype.write = function(output) {
  output.writeStructBegin('TSCreateTimeseriesReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.I32, 3);
    output.writeI32(this.dataType);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.compressor !== null && this.compressor !== undefined) {
    output.writeFieldBegin('compressor', Thrift.Type.I32, 5);
    output.writeI32(this.compressor);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.props));
    for (var kiter276 in this.props) {
      if (this.props.hasOwnProperty(kiter276)) {
        var viter277 = this.props[kiter276];
        output.writeString(kiter276);
        output.writeString(viter277);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter278 in this.tags) {
      if (this.tags.hasOwnProperty(kiter278)) {
        var viter279 = this.tags[kiter278];
        output.writeString(kiter278);
        output.writeString(viter279);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter280 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter280)) {
        var viter281 = this.attributes[kiter280];
        output.writeString(kiter280);
        output.writeString(viter281);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.measurementAlias !== null && this.measurementAlias !== undefined) {
    output.writeFieldBegin('measurementAlias', Thrift.Type.STRING, 9);
    output.writeString(this.measurementAlias);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCreateAlignedTimeseriesReq = module.exports.TSCreateAlignedTimeseriesReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.measurements = null;
  this.dataTypes = null;
  this.encodings = null;
  this.compressors = null;
  this.measurementAlias = null;
  this.tagsList = null;
  this.attributesList = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.dataTypes !== undefined && args.dataTypes !== null) {
      this.dataTypes = Thrift.copyList(args.dataTypes, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataTypes is unset!');
    }
    if (args.encodings !== undefined && args.encodings !== null) {
      this.encodings = Thrift.copyList(args.encodings, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field encodings is unset!');
    }
    if (args.compressors !== undefined && args.compressors !== null) {
      this.compressors = Thrift.copyList(args.compressors, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compressors is unset!');
    }
    if (args.measurementAlias !== undefined && args.measurementAlias !== null) {
      this.measurementAlias = Thrift.copyList(args.measurementAlias, [null]);
    }
    if (args.tagsList !== undefined && args.tagsList !== null) {
      this.tagsList = Thrift.copyList(args.tagsList, [Thrift.copyMap, null]);
    }
    if (args.attributesList !== undefined && args.attributesList !== null) {
      this.attributesList = Thrift.copyList(args.attributesList, [Thrift.copyMap, null]);
    }
  }
};
TSCreateAlignedTimeseriesReq.prototype = {};
TSCreateAlignedTimeseriesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp3283 = input.readListBegin();
        var _size282 = _rtmp3283.size || 0;
        for (var _i284 = 0; _i284 < _size282; ++_i284) {
          var elem285 = null;
          elem285 = input.readString();
          this.measurements.push(elem285);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.dataTypes = [];
        var _rtmp3287 = input.readListBegin();
        var _size286 = _rtmp3287.size || 0;
        for (var _i288 = 0; _i288 < _size286; ++_i288) {
          var elem289 = null;
          elem289 = input.readI32();
          this.dataTypes.push(elem289);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.encodings = [];
        var _rtmp3291 = input.readListBegin();
        var _size290 = _rtmp3291.size || 0;
        for (var _i292 = 0; _i292 < _size290; ++_i292) {
          var elem293 = null;
          elem293 = input.readI32();
          this.encodings.push(elem293);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.compressors = [];
        var _rtmp3295 = input.readListBegin();
        var _size294 = _rtmp3295.size || 0;
        for (var _i296 = 0; _i296 < _size294; ++_i296) {
          var elem297 = null;
          elem297 = input.readI32();
          this.compressors.push(elem297);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.measurementAlias = [];
        var _rtmp3299 = input.readListBegin();
        var _size298 = _rtmp3299.size || 0;
        for (var _i300 = 0; _i300 < _size298; ++_i300) {
          var elem301 = null;
          elem301 = input.readString();
          this.measurementAlias.push(elem301);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.tagsList = [];
        var _rtmp3303 = input.readListBegin();
        var _size302 = _rtmp3303.size || 0;
        for (var _i304 = 0; _i304 < _size302; ++_i304) {
          var elem305 = null;
          elem305 = {};
          var _rtmp3307 = input.readMapBegin();
          var _size306 = _rtmp3307.size || 0;
          for (var _i308 = 0; _i308 < _size306; ++_i308) {
            var key309 = null;
            var val310 = null;
            key309 = input.readString();
            val310 = input.readString();
            elem305[key309] = val310;
          }
          input.readMapEnd();
          this.tagsList.push(elem305);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.attributesList = [];
        var _rtmp3312 = input.readListBegin();
        var _size311 = _rtmp3312.size || 0;
        for (var _i313 = 0; _i313 < _size311; ++_i313) {
          var elem314 = null;
          elem314 = {};
          var _rtmp3316 = input.readMapBegin();
          var _size315 = _rtmp3316.size || 0;
          for (var _i317 = 0; _i317 < _size315; ++_i317) {
            var key318 = null;
            var val319 = null;
            key318 = input.readString();
            val319 = input.readString();
            elem314[key318] = val319;
          }
          input.readMapEnd();
          this.attributesList.push(elem314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCreateAlignedTimeseriesReq.prototype.write = function(output) {
  output.writeStructBegin('TSCreateAlignedTimeseriesReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter320 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter320)) {
        iter320 = this.measurements[iter320];
        output.writeString(iter320);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataTypes !== null && this.dataTypes !== undefined) {
    output.writeFieldBegin('dataTypes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.dataTypes.length);
    for (var iter321 in this.dataTypes) {
      if (this.dataTypes.hasOwnProperty(iter321)) {
        iter321 = this.dataTypes[iter321];
        output.writeI32(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.encodings !== null && this.encodings !== undefined) {
    output.writeFieldBegin('encodings', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.encodings.length);
    for (var iter322 in this.encodings) {
      if (this.encodings.hasOwnProperty(iter322)) {
        iter322 = this.encodings[iter322];
        output.writeI32(iter322);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.compressors !== null && this.compressors !== undefined) {
    output.writeFieldBegin('compressors', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.compressors.length);
    for (var iter323 in this.compressors) {
      if (this.compressors.hasOwnProperty(iter323)) {
        iter323 = this.compressors[iter323];
        output.writeI32(iter323);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.measurementAlias !== null && this.measurementAlias !== undefined) {
    output.writeFieldBegin('measurementAlias', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.measurementAlias.length);
    for (var iter324 in this.measurementAlias) {
      if (this.measurementAlias.hasOwnProperty(iter324)) {
        iter324 = this.measurementAlias[iter324];
        output.writeString(iter324);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tagsList !== null && this.tagsList !== undefined) {
    output.writeFieldBegin('tagsList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.MAP, this.tagsList.length);
    for (var iter325 in this.tagsList) {
      if (this.tagsList.hasOwnProperty(iter325)) {
        iter325 = this.tagsList[iter325];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter325));
        for (var kiter326 in iter325) {
          if (iter325.hasOwnProperty(kiter326)) {
            var viter327 = iter325[kiter326];
            output.writeString(kiter326);
            output.writeString(viter327);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributesList !== null && this.attributesList !== undefined) {
    output.writeFieldBegin('attributesList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.MAP, this.attributesList.length);
    for (var iter328 in this.attributesList) {
      if (this.attributesList.hasOwnProperty(iter328)) {
        iter328 = this.attributesList[iter328];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter328));
        for (var kiter329 in iter328) {
          if (iter328.hasOwnProperty(kiter329)) {
            var viter330 = iter328[kiter329];
            output.writeString(kiter329);
            output.writeString(viter330);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSRawDataQueryReq = module.exports.TSRawDataQueryReq = function(args) {
  this.sessionId = null;
  this.paths = null;
  this.fetchSize = null;
  this.startTime = null;
  this.endTime = null;
  this.statementId = null;
  this.enableRedirectQuery = null;
  this.jdbcQuery = null;
  this.timeout = null;
  this.legalPathNodes = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field paths is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field endTime is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.enableRedirectQuery !== undefined && args.enableRedirectQuery !== null) {
      this.enableRedirectQuery = args.enableRedirectQuery;
    }
    if (args.jdbcQuery !== undefined && args.jdbcQuery !== null) {
      this.jdbcQuery = args.jdbcQuery;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
    if (args.legalPathNodes !== undefined && args.legalPathNodes !== null) {
      this.legalPathNodes = args.legalPathNodes;
    }
  }
};
TSRawDataQueryReq.prototype = {};
TSRawDataQueryReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.paths = [];
        var _rtmp3332 = input.readListBegin();
        var _size331 = _rtmp3332.size || 0;
        for (var _i333 = 0; _i333 < _size331; ++_i333) {
          var elem334 = null;
          elem334 = input.readString();
          this.paths.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enableRedirectQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.jdbcQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.legalPathNodes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSRawDataQueryReq.prototype.write = function(output) {
  output.writeStructBegin('TSRawDataQueryReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter335 in this.paths) {
      if (this.paths.hasOwnProperty(iter335)) {
        iter335 = this.paths[iter335];
        output.writeString(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 3);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 4);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 5);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 6);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.enableRedirectQuery !== null && this.enableRedirectQuery !== undefined) {
    output.writeFieldBegin('enableRedirectQuery', Thrift.Type.BOOL, 7);
    output.writeBool(this.enableRedirectQuery);
    output.writeFieldEnd();
  }
  if (this.jdbcQuery !== null && this.jdbcQuery !== undefined) {
    output.writeFieldBegin('jdbcQuery', Thrift.Type.BOOL, 8);
    output.writeBool(this.jdbcQuery);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 9);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.legalPathNodes !== null && this.legalPathNodes !== undefined) {
    output.writeFieldBegin('legalPathNodes', Thrift.Type.BOOL, 10);
    output.writeBool(this.legalPathNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSLastDataQueryReq = module.exports.TSLastDataQueryReq = function(args) {
  this.sessionId = null;
  this.paths = null;
  this.fetchSize = null;
  this.time = null;
  this.statementId = null;
  this.enableRedirectQuery = null;
  this.jdbcQuery = null;
  this.timeout = null;
  this.legalPathNodes = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field paths is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.enableRedirectQuery !== undefined && args.enableRedirectQuery !== null) {
      this.enableRedirectQuery = args.enableRedirectQuery;
    }
    if (args.jdbcQuery !== undefined && args.jdbcQuery !== null) {
      this.jdbcQuery = args.jdbcQuery;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
    if (args.legalPathNodes !== undefined && args.legalPathNodes !== null) {
      this.legalPathNodes = args.legalPathNodes;
    }
  }
};
TSLastDataQueryReq.prototype = {};
TSLastDataQueryReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.paths = [];
        var _rtmp3337 = input.readListBegin();
        var _size336 = _rtmp3337.size || 0;
        for (var _i338 = 0; _i338 < _size336; ++_i338) {
          var elem339 = null;
          elem339 = input.readString();
          this.paths.push(elem339);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableRedirectQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.jdbcQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.legalPathNodes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSLastDataQueryReq.prototype.write = function(output) {
  output.writeStructBegin('TSLastDataQueryReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter340 in this.paths) {
      if (this.paths.hasOwnProperty(iter340)) {
        iter340 = this.paths[iter340];
        output.writeString(iter340);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 3);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 4);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 5);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.enableRedirectQuery !== null && this.enableRedirectQuery !== undefined) {
    output.writeFieldBegin('enableRedirectQuery', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableRedirectQuery);
    output.writeFieldEnd();
  }
  if (this.jdbcQuery !== null && this.jdbcQuery !== undefined) {
    output.writeFieldBegin('jdbcQuery', Thrift.Type.BOOL, 7);
    output.writeBool(this.jdbcQuery);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 8);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.legalPathNodes !== null && this.legalPathNodes !== undefined) {
    output.writeFieldBegin('legalPathNodes', Thrift.Type.BOOL, 9);
    output.writeBool(this.legalPathNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSFastLastDataQueryForOneDeviceReq = module.exports.TSFastLastDataQueryForOneDeviceReq = function(args) {
  this.sessionId = null;
  this.db = null;
  this.deviceId = null;
  this.sensors = null;
  this.fetchSize = null;
  this.statementId = null;
  this.enableRedirectQuery = null;
  this.jdbcQuery = null;
  this.timeout = null;
  this.legalPathNodes = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.db !== undefined && args.db !== null) {
      this.db = args.db;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field db is unset!');
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.sensors !== undefined && args.sensors !== null) {
      this.sensors = Thrift.copyList(args.sensors, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sensors is unset!');
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.enableRedirectQuery !== undefined && args.enableRedirectQuery !== null) {
      this.enableRedirectQuery = args.enableRedirectQuery;
    }
    if (args.jdbcQuery !== undefined && args.jdbcQuery !== null) {
      this.jdbcQuery = args.jdbcQuery;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
    if (args.legalPathNodes !== undefined && args.legalPathNodes !== null) {
      this.legalPathNodes = args.legalPathNodes;
    }
  }
};
TSFastLastDataQueryForOneDeviceReq.prototype = {};
TSFastLastDataQueryForOneDeviceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.sensors = [];
        var _rtmp3342 = input.readListBegin();
        var _size341 = _rtmp3342.size || 0;
        for (var _i343 = 0; _i343 < _size341; ++_i343) {
          var elem344 = null;
          elem344 = input.readString();
          this.sensors.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enableRedirectQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.jdbcQuery = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.legalPathNodes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSFastLastDataQueryForOneDeviceReq.prototype.write = function(output) {
  output.writeStructBegin('TSFastLastDataQueryForOneDeviceReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.db !== null && this.db !== undefined) {
    output.writeFieldBegin('db', Thrift.Type.STRING, 2);
    output.writeString(this.db);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 3);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.sensors !== null && this.sensors !== undefined) {
    output.writeFieldBegin('sensors', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.sensors.length);
    for (var iter345 in this.sensors) {
      if (this.sensors.hasOwnProperty(iter345)) {
        iter345 = this.sensors[iter345];
        output.writeString(iter345);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 5);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 6);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.enableRedirectQuery !== null && this.enableRedirectQuery !== undefined) {
    output.writeFieldBegin('enableRedirectQuery', Thrift.Type.BOOL, 7);
    output.writeBool(this.enableRedirectQuery);
    output.writeFieldEnd();
  }
  if (this.jdbcQuery !== null && this.jdbcQuery !== undefined) {
    output.writeFieldBegin('jdbcQuery', Thrift.Type.BOOL, 8);
    output.writeBool(this.jdbcQuery);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 9);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.legalPathNodes !== null && this.legalPathNodes !== undefined) {
    output.writeFieldBegin('legalPathNodes', Thrift.Type.BOOL, 10);
    output.writeBool(this.legalPathNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSAggregationQueryReq = module.exports.TSAggregationQueryReq = function(args) {
  this.sessionId = null;
  this.statementId = null;
  this.paths = null;
  this.aggregations = null;
  this.startTime = null;
  this.endTime = null;
  this.interval = null;
  this.slidingStep = null;
  this.fetchSize = null;
  this.timeout = null;
  this.legalPathNodes = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field paths is unset!');
    }
    if (args.aggregations !== undefined && args.aggregations !== null) {
      this.aggregations = Thrift.copyList(args.aggregations, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aggregations is unset!');
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.interval !== undefined && args.interval !== null) {
      this.interval = args.interval;
    }
    if (args.slidingStep !== undefined && args.slidingStep !== null) {
      this.slidingStep = args.slidingStep;
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
    if (args.legalPathNodes !== undefined && args.legalPathNodes !== null) {
      this.legalPathNodes = args.legalPathNodes;
    }
  }
};
TSAggregationQueryReq.prototype = {};
TSAggregationQueryReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.paths = [];
        var _rtmp3347 = input.readListBegin();
        var _size346 = _rtmp3347.size || 0;
        for (var _i348 = 0; _i348 < _size346; ++_i348) {
          var elem349 = null;
          elem349 = input.readString();
          this.paths.push(elem349);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.aggregations = [];
        var _rtmp3351 = input.readListBegin();
        var _size350 = _rtmp3351.size || 0;
        for (var _i352 = 0; _i352 < _size350; ++_i352) {
          var elem353 = null;
          elem353 = input.readI32();
          this.aggregations.push(elem353);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.interval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.slidingStep = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.legalPathNodes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSAggregationQueryReq.prototype.write = function(output) {
  output.writeStructBegin('TSAggregationQueryReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 2);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter354 in this.paths) {
      if (this.paths.hasOwnProperty(iter354)) {
        iter354 = this.paths[iter354];
        output.writeString(iter354);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aggregations !== null && this.aggregations !== undefined) {
    output.writeFieldBegin('aggregations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.aggregations.length);
    for (var iter355 in this.aggregations) {
      if (this.aggregations.hasOwnProperty(iter355)) {
        iter355 = this.aggregations[iter355];
        output.writeI32(iter355);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 5);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 6);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.interval !== null && this.interval !== undefined) {
    output.writeFieldBegin('interval', Thrift.Type.I64, 7);
    output.writeI64(this.interval);
    output.writeFieldEnd();
  }
  if (this.slidingStep !== null && this.slidingStep !== undefined) {
    output.writeFieldBegin('slidingStep', Thrift.Type.I64, 8);
    output.writeI64(this.slidingStep);
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 9);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 10);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.legalPathNodes !== null && this.legalPathNodes !== undefined) {
    output.writeFieldBegin('legalPathNodes', Thrift.Type.BOOL, 11);
    output.writeBool(this.legalPathNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSGroupByQueryIntervalReq = module.exports.TSGroupByQueryIntervalReq = function(args) {
  this.sessionId = null;
  this.statementId = null;
  this.device = null;
  this.measurement = null;
  this.dataType = null;
  this.aggregationType = null;
  this.database = null;
  this.startTime = null;
  this.endTime = null;
  this.interval = null;
  this.fetchSize = null;
  this.timeout = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.statementId !== undefined && args.statementId !== null) {
      this.statementId = args.statementId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statementId is unset!');
    }
    if (args.device !== undefined && args.device !== null) {
      this.device = args.device;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field device is unset!');
    }
    if (args.measurement !== undefined && args.measurement !== null) {
      this.measurement = args.measurement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurement is unset!');
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataType is unset!');
    }
    if (args.aggregationType !== undefined && args.aggregationType !== null) {
      this.aggregationType = args.aggregationType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aggregationType is unset!');
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.interval !== undefined && args.interval !== null) {
      this.interval = args.interval;
    }
    if (args.fetchSize !== undefined && args.fetchSize !== null) {
      this.fetchSize = args.fetchSize;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
TSGroupByQueryIntervalReq.prototype = {};
TSGroupByQueryIntervalReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.statementId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.device = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.measurement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.dataType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.aggregationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.interval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.fetchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSGroupByQueryIntervalReq.prototype.write = function(output) {
  output.writeStructBegin('TSGroupByQueryIntervalReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.statementId !== null && this.statementId !== undefined) {
    output.writeFieldBegin('statementId', Thrift.Type.I64, 2);
    output.writeI64(this.statementId);
    output.writeFieldEnd();
  }
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRING, 3);
    output.writeString(this.device);
    output.writeFieldEnd();
  }
  if (this.measurement !== null && this.measurement !== undefined) {
    output.writeFieldBegin('measurement', Thrift.Type.STRING, 4);
    output.writeString(this.measurement);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.I32, 5);
    output.writeI32(this.dataType);
    output.writeFieldEnd();
  }
  if (this.aggregationType !== null && this.aggregationType !== undefined) {
    output.writeFieldBegin('aggregationType', Thrift.Type.I32, 6);
    output.writeI32(this.aggregationType);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 7);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.interval !== null && this.interval !== undefined) {
    output.writeFieldBegin('interval', Thrift.Type.I64, 10);
    output.writeI64(this.interval);
    output.writeFieldEnd();
  }
  if (this.fetchSize !== null && this.fetchSize !== undefined) {
    output.writeFieldBegin('fetchSize', Thrift.Type.I32, 11);
    output.writeI32(this.fetchSize);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 12);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCreateMultiTimeseriesReq = module.exports.TSCreateMultiTimeseriesReq = function(args) {
  this.sessionId = null;
  this.paths = null;
  this.dataTypes = null;
  this.encodings = null;
  this.compressors = null;
  this.propsList = null;
  this.tagsList = null;
  this.attributesList = null;
  this.measurementAliasList = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field paths is unset!');
    }
    if (args.dataTypes !== undefined && args.dataTypes !== null) {
      this.dataTypes = Thrift.copyList(args.dataTypes, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataTypes is unset!');
    }
    if (args.encodings !== undefined && args.encodings !== null) {
      this.encodings = Thrift.copyList(args.encodings, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field encodings is unset!');
    }
    if (args.compressors !== undefined && args.compressors !== null) {
      this.compressors = Thrift.copyList(args.compressors, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compressors is unset!');
    }
    if (args.propsList !== undefined && args.propsList !== null) {
      this.propsList = Thrift.copyList(args.propsList, [Thrift.copyMap, null]);
    }
    if (args.tagsList !== undefined && args.tagsList !== null) {
      this.tagsList = Thrift.copyList(args.tagsList, [Thrift.copyMap, null]);
    }
    if (args.attributesList !== undefined && args.attributesList !== null) {
      this.attributesList = Thrift.copyList(args.attributesList, [Thrift.copyMap, null]);
    }
    if (args.measurementAliasList !== undefined && args.measurementAliasList !== null) {
      this.measurementAliasList = Thrift.copyList(args.measurementAliasList, [null]);
    }
  }
};
TSCreateMultiTimeseriesReq.prototype = {};
TSCreateMultiTimeseriesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.paths = [];
        var _rtmp3357 = input.readListBegin();
        var _size356 = _rtmp3357.size || 0;
        for (var _i358 = 0; _i358 < _size356; ++_i358) {
          var elem359 = null;
          elem359 = input.readString();
          this.paths.push(elem359);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dataTypes = [];
        var _rtmp3361 = input.readListBegin();
        var _size360 = _rtmp3361.size || 0;
        for (var _i362 = 0; _i362 < _size360; ++_i362) {
          var elem363 = null;
          elem363 = input.readI32();
          this.dataTypes.push(elem363);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.encodings = [];
        var _rtmp3365 = input.readListBegin();
        var _size364 = _rtmp3365.size || 0;
        for (var _i366 = 0; _i366 < _size364; ++_i366) {
          var elem367 = null;
          elem367 = input.readI32();
          this.encodings.push(elem367);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.compressors = [];
        var _rtmp3369 = input.readListBegin();
        var _size368 = _rtmp3369.size || 0;
        for (var _i370 = 0; _i370 < _size368; ++_i370) {
          var elem371 = null;
          elem371 = input.readI32();
          this.compressors.push(elem371);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.propsList = [];
        var _rtmp3373 = input.readListBegin();
        var _size372 = _rtmp3373.size || 0;
        for (var _i374 = 0; _i374 < _size372; ++_i374) {
          var elem375 = null;
          elem375 = {};
          var _rtmp3377 = input.readMapBegin();
          var _size376 = _rtmp3377.size || 0;
          for (var _i378 = 0; _i378 < _size376; ++_i378) {
            var key379 = null;
            var val380 = null;
            key379 = input.readString();
            val380 = input.readString();
            elem375[key379] = val380;
          }
          input.readMapEnd();
          this.propsList.push(elem375);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.tagsList = [];
        var _rtmp3382 = input.readListBegin();
        var _size381 = _rtmp3382.size || 0;
        for (var _i383 = 0; _i383 < _size381; ++_i383) {
          var elem384 = null;
          elem384 = {};
          var _rtmp3386 = input.readMapBegin();
          var _size385 = _rtmp3386.size || 0;
          for (var _i387 = 0; _i387 < _size385; ++_i387) {
            var key388 = null;
            var val389 = null;
            key388 = input.readString();
            val389 = input.readString();
            elem384[key388] = val389;
          }
          input.readMapEnd();
          this.tagsList.push(elem384);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.attributesList = [];
        var _rtmp3391 = input.readListBegin();
        var _size390 = _rtmp3391.size || 0;
        for (var _i392 = 0; _i392 < _size390; ++_i392) {
          var elem393 = null;
          elem393 = {};
          var _rtmp3395 = input.readMapBegin();
          var _size394 = _rtmp3395.size || 0;
          for (var _i396 = 0; _i396 < _size394; ++_i396) {
            var key397 = null;
            var val398 = null;
            key397 = input.readString();
            val398 = input.readString();
            elem393[key397] = val398;
          }
          input.readMapEnd();
          this.attributesList.push(elem393);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.measurementAliasList = [];
        var _rtmp3400 = input.readListBegin();
        var _size399 = _rtmp3400.size || 0;
        for (var _i401 = 0; _i401 < _size399; ++_i401) {
          var elem402 = null;
          elem402 = input.readString();
          this.measurementAliasList.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCreateMultiTimeseriesReq.prototype.write = function(output) {
  output.writeStructBegin('TSCreateMultiTimeseriesReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter403 in this.paths) {
      if (this.paths.hasOwnProperty(iter403)) {
        iter403 = this.paths[iter403];
        output.writeString(iter403);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataTypes !== null && this.dataTypes !== undefined) {
    output.writeFieldBegin('dataTypes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.dataTypes.length);
    for (var iter404 in this.dataTypes) {
      if (this.dataTypes.hasOwnProperty(iter404)) {
        iter404 = this.dataTypes[iter404];
        output.writeI32(iter404);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.encodings !== null && this.encodings !== undefined) {
    output.writeFieldBegin('encodings', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.encodings.length);
    for (var iter405 in this.encodings) {
      if (this.encodings.hasOwnProperty(iter405)) {
        iter405 = this.encodings[iter405];
        output.writeI32(iter405);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.compressors !== null && this.compressors !== undefined) {
    output.writeFieldBegin('compressors', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.compressors.length);
    for (var iter406 in this.compressors) {
      if (this.compressors.hasOwnProperty(iter406)) {
        iter406 = this.compressors[iter406];
        output.writeI32(iter406);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.propsList !== null && this.propsList !== undefined) {
    output.writeFieldBegin('propsList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.MAP, this.propsList.length);
    for (var iter407 in this.propsList) {
      if (this.propsList.hasOwnProperty(iter407)) {
        iter407 = this.propsList[iter407];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter407));
        for (var kiter408 in iter407) {
          if (iter407.hasOwnProperty(kiter408)) {
            var viter409 = iter407[kiter408];
            output.writeString(kiter408);
            output.writeString(viter409);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tagsList !== null && this.tagsList !== undefined) {
    output.writeFieldBegin('tagsList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.MAP, this.tagsList.length);
    for (var iter410 in this.tagsList) {
      if (this.tagsList.hasOwnProperty(iter410)) {
        iter410 = this.tagsList[iter410];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter410));
        for (var kiter411 in iter410) {
          if (iter410.hasOwnProperty(kiter411)) {
            var viter412 = iter410[kiter411];
            output.writeString(kiter411);
            output.writeString(viter412);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributesList !== null && this.attributesList !== undefined) {
    output.writeFieldBegin('attributesList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.MAP, this.attributesList.length);
    for (var iter413 in this.attributesList) {
      if (this.attributesList.hasOwnProperty(iter413)) {
        iter413 = this.attributesList[iter413];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter413));
        for (var kiter414 in iter413) {
          if (iter413.hasOwnProperty(kiter414)) {
            var viter415 = iter413[kiter414];
            output.writeString(kiter414);
            output.writeString(viter415);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.measurementAliasList !== null && this.measurementAliasList !== undefined) {
    output.writeFieldBegin('measurementAliasList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.measurementAliasList.length);
    for (var iter416 in this.measurementAliasList) {
      if (this.measurementAliasList.hasOwnProperty(iter416)) {
        iter416 = this.measurementAliasList[iter416];
        output.writeString(iter416);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServerProperties = module.exports.ServerProperties = function(args) {
  this.version = null;
  this.supportedTimeAggregationOperations = null;
  this.timestampPrecision = null;
  this.maxConcurrentClientNum = null;
  this.thriftMaxFrameSize = null;
  this.isReadOnly = null;
  this.buildInfo = null;
  this.logo = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.supportedTimeAggregationOperations !== undefined && args.supportedTimeAggregationOperations !== null) {
      this.supportedTimeAggregationOperations = Thrift.copyList(args.supportedTimeAggregationOperations, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field supportedTimeAggregationOperations is unset!');
    }
    if (args.timestampPrecision !== undefined && args.timestampPrecision !== null) {
      this.timestampPrecision = args.timestampPrecision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestampPrecision is unset!');
    }
    if (args.maxConcurrentClientNum !== undefined && args.maxConcurrentClientNum !== null) {
      this.maxConcurrentClientNum = args.maxConcurrentClientNum;
    }
    if (args.thriftMaxFrameSize !== undefined && args.thriftMaxFrameSize !== null) {
      this.thriftMaxFrameSize = args.thriftMaxFrameSize;
    }
    if (args.isReadOnly !== undefined && args.isReadOnly !== null) {
      this.isReadOnly = args.isReadOnly;
    }
    if (args.buildInfo !== undefined && args.buildInfo !== null) {
      this.buildInfo = args.buildInfo;
    }
    if (args.logo !== undefined && args.logo !== null) {
      this.logo = args.logo;
    }
  }
};
ServerProperties.prototype = {};
ServerProperties.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.supportedTimeAggregationOperations = [];
        var _rtmp3418 = input.readListBegin();
        var _size417 = _rtmp3418.size || 0;
        for (var _i419 = 0; _i419 < _size417; ++_i419) {
          var elem420 = null;
          elem420 = input.readString();
          this.supportedTimeAggregationOperations.push(elem420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timestampPrecision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxConcurrentClientNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.thriftMaxFrameSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isReadOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.buildInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.logo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerProperties.prototype.write = function(output) {
  output.writeStructBegin('ServerProperties');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.supportedTimeAggregationOperations !== null && this.supportedTimeAggregationOperations !== undefined) {
    output.writeFieldBegin('supportedTimeAggregationOperations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.supportedTimeAggregationOperations.length);
    for (var iter421 in this.supportedTimeAggregationOperations) {
      if (this.supportedTimeAggregationOperations.hasOwnProperty(iter421)) {
        iter421 = this.supportedTimeAggregationOperations[iter421];
        output.writeString(iter421);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestampPrecision !== null && this.timestampPrecision !== undefined) {
    output.writeFieldBegin('timestampPrecision', Thrift.Type.STRING, 3);
    output.writeString(this.timestampPrecision);
    output.writeFieldEnd();
  }
  if (this.maxConcurrentClientNum !== null && this.maxConcurrentClientNum !== undefined) {
    output.writeFieldBegin('maxConcurrentClientNum', Thrift.Type.I32, 4);
    output.writeI32(this.maxConcurrentClientNum);
    output.writeFieldEnd();
  }
  if (this.thriftMaxFrameSize !== null && this.thriftMaxFrameSize !== undefined) {
    output.writeFieldBegin('thriftMaxFrameSize', Thrift.Type.I32, 5);
    output.writeI32(this.thriftMaxFrameSize);
    output.writeFieldEnd();
  }
  if (this.isReadOnly !== null && this.isReadOnly !== undefined) {
    output.writeFieldBegin('isReadOnly', Thrift.Type.BOOL, 6);
    output.writeBool(this.isReadOnly);
    output.writeFieldEnd();
  }
  if (this.buildInfo !== null && this.buildInfo !== undefined) {
    output.writeFieldBegin('buildInfo', Thrift.Type.STRING, 7);
    output.writeString(this.buildInfo);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRING, 8);
    output.writeString(this.logo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSSetSchemaTemplateReq = module.exports.TSSetSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.templateName = null;
  this.prefixPath = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.templateName !== undefined && args.templateName !== null) {
      this.templateName = args.templateName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field templateName is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
  }
};
TSSetSchemaTemplateReq.prototype = {};
TSSetSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSSetSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSSetSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.templateName !== null && this.templateName !== undefined) {
    output.writeFieldBegin('templateName', Thrift.Type.STRING, 2);
    output.writeString(this.templateName);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 3);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSCreateSchemaTemplateReq = module.exports.TSCreateSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.name = null;
  this.serializedTemplate = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.serializedTemplate !== undefined && args.serializedTemplate !== null) {
      this.serializedTemplate = args.serializedTemplate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serializedTemplate is unset!');
    }
  }
};
TSCreateSchemaTemplateReq.prototype = {};
TSCreateSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serializedTemplate = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSCreateSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSCreateSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serializedTemplate !== null && this.serializedTemplate !== undefined) {
    output.writeFieldBegin('serializedTemplate', Thrift.Type.STRING, 3);
    output.writeBinary(this.serializedTemplate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSAppendSchemaTemplateReq = module.exports.TSAppendSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.name = null;
  this.isAligned = null;
  this.measurements = null;
  this.dataTypes = null;
  this.encodings = null;
  this.compressors = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.isAligned !== undefined && args.isAligned !== null) {
      this.isAligned = args.isAligned;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isAligned is unset!');
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measurements is unset!');
    }
    if (args.dataTypes !== undefined && args.dataTypes !== null) {
      this.dataTypes = Thrift.copyList(args.dataTypes, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataTypes is unset!');
    }
    if (args.encodings !== undefined && args.encodings !== null) {
      this.encodings = Thrift.copyList(args.encodings, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field encodings is unset!');
    }
    if (args.compressors !== undefined && args.compressors !== null) {
      this.compressors = Thrift.copyList(args.compressors, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compressors is unset!');
    }
  }
};
TSAppendSchemaTemplateReq.prototype = {};
TSAppendSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isAligned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp3423 = input.readListBegin();
        var _size422 = _rtmp3423.size || 0;
        for (var _i424 = 0; _i424 < _size422; ++_i424) {
          var elem425 = null;
          elem425 = input.readString();
          this.measurements.push(elem425);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.dataTypes = [];
        var _rtmp3427 = input.readListBegin();
        var _size426 = _rtmp3427.size || 0;
        for (var _i428 = 0; _i428 < _size426; ++_i428) {
          var elem429 = null;
          elem429 = input.readI32();
          this.dataTypes.push(elem429);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.encodings = [];
        var _rtmp3431 = input.readListBegin();
        var _size430 = _rtmp3431.size || 0;
        for (var _i432 = 0; _i432 < _size430; ++_i432) {
          var elem433 = null;
          elem433 = input.readI32();
          this.encodings.push(elem433);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.compressors = [];
        var _rtmp3435 = input.readListBegin();
        var _size434 = _rtmp3435.size || 0;
        for (var _i436 = 0; _i436 < _size434; ++_i436) {
          var elem437 = null;
          elem437 = input.readI32();
          this.compressors.push(elem437);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSAppendSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSAppendSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.isAligned !== null && this.isAligned !== undefined) {
    output.writeFieldBegin('isAligned', Thrift.Type.BOOL, 3);
    output.writeBool(this.isAligned);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter438 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter438)) {
        iter438 = this.measurements[iter438];
        output.writeString(iter438);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dataTypes !== null && this.dataTypes !== undefined) {
    output.writeFieldBegin('dataTypes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.dataTypes.length);
    for (var iter439 in this.dataTypes) {
      if (this.dataTypes.hasOwnProperty(iter439)) {
        iter439 = this.dataTypes[iter439];
        output.writeI32(iter439);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.encodings !== null && this.encodings !== undefined) {
    output.writeFieldBegin('encodings', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.encodings.length);
    for (var iter440 in this.encodings) {
      if (this.encodings.hasOwnProperty(iter440)) {
        iter440 = this.encodings[iter440];
        output.writeI32(iter440);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.compressors !== null && this.compressors !== undefined) {
    output.writeFieldBegin('compressors', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.compressors.length);
    for (var iter441 in this.compressors) {
      if (this.compressors.hasOwnProperty(iter441)) {
        iter441 = this.compressors[iter441];
        output.writeI32(iter441);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSPruneSchemaTemplateReq = module.exports.TSPruneSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.name = null;
  this.path = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
  }
};
TSPruneSchemaTemplateReq.prototype = {};
TSPruneSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSPruneSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSPruneSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 3);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSQueryTemplateReq = module.exports.TSQueryTemplateReq = function(args) {
  this.sessionId = null;
  this.name = null;
  this.queryType = null;
  this.measurement = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.queryType !== undefined && args.queryType !== null) {
      this.queryType = args.queryType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryType is unset!');
    }
    if (args.measurement !== undefined && args.measurement !== null) {
      this.measurement = args.measurement;
    }
  }
};
TSQueryTemplateReq.prototype = {};
TSQueryTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.queryType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.measurement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSQueryTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSQueryTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.queryType !== null && this.queryType !== undefined) {
    output.writeFieldBegin('queryType', Thrift.Type.I32, 3);
    output.writeI32(this.queryType);
    output.writeFieldEnd();
  }
  if (this.measurement !== null && this.measurement !== undefined) {
    output.writeFieldBegin('measurement', Thrift.Type.STRING, 4);
    output.writeString(this.measurement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSQueryTemplateResp = module.exports.TSQueryTemplateResp = function(args) {
  this.status = null;
  this.queryType = null;
  this.result = null;
  this.count = null;
  this.measurements = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.queryType !== undefined && args.queryType !== null) {
      this.queryType = args.queryType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryType is unset!');
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.measurements !== undefined && args.measurements !== null) {
      this.measurements = Thrift.copyList(args.measurements, [null]);
    }
  }
};
TSQueryTemplateResp.prototype = {};
TSQueryTemplateResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.measurements = [];
        var _rtmp3443 = input.readListBegin();
        var _size442 = _rtmp3443.size || 0;
        for (var _i444 = 0; _i444 < _size442; ++_i444) {
          var elem445 = null;
          elem445 = input.readString();
          this.measurements.push(elem445);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSQueryTemplateResp.prototype.write = function(output) {
  output.writeStructBegin('TSQueryTemplateResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.queryType !== null && this.queryType !== undefined) {
    output.writeFieldBegin('queryType', Thrift.Type.I32, 2);
    output.writeI32(this.queryType);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 3);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.measurements !== null && this.measurements !== undefined) {
    output.writeFieldBegin('measurements', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.measurements.length);
    for (var iter446 in this.measurements) {
      if (this.measurements.hasOwnProperty(iter446)) {
        iter446 = this.measurements[iter446];
        output.writeString(iter446);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSUnsetSchemaTemplateReq = module.exports.TSUnsetSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.prefixPath = null;
  this.templateName = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.prefixPath !== undefined && args.prefixPath !== null) {
      this.prefixPath = args.prefixPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefixPath is unset!');
    }
    if (args.templateName !== undefined && args.templateName !== null) {
      this.templateName = args.templateName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field templateName is unset!');
    }
  }
};
TSUnsetSchemaTemplateReq.prototype = {};
TSUnsetSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefixPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.templateName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSUnsetSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSUnsetSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.prefixPath !== null && this.prefixPath !== undefined) {
    output.writeFieldBegin('prefixPath', Thrift.Type.STRING, 2);
    output.writeString(this.prefixPath);
    output.writeFieldEnd();
  }
  if (this.templateName !== null && this.templateName !== undefined) {
    output.writeFieldBegin('templateName', Thrift.Type.STRING, 3);
    output.writeString(this.templateName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSDropSchemaTemplateReq = module.exports.TSDropSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.templateName = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.templateName !== undefined && args.templateName !== null) {
      this.templateName = args.templateName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field templateName is unset!');
    }
  }
};
TSDropSchemaTemplateReq.prototype = {};
TSDropSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSDropSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TSDropSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.templateName !== null && this.templateName !== undefined) {
    output.writeFieldBegin('templateName', Thrift.Type.STRING, 2);
    output.writeString(this.templateName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCreateTimeseriesUsingSchemaTemplateReq = module.exports.TCreateTimeseriesUsingSchemaTemplateReq = function(args) {
  this.sessionId = null;
  this.devicePathList = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.devicePathList !== undefined && args.devicePathList !== null) {
      this.devicePathList = Thrift.copyList(args.devicePathList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field devicePathList is unset!');
    }
  }
};
TCreateTimeseriesUsingSchemaTemplateReq.prototype = {};
TCreateTimeseriesUsingSchemaTemplateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.devicePathList = [];
        var _rtmp3448 = input.readListBegin();
        var _size447 = _rtmp3448.size || 0;
        for (var _i449 = 0; _i449 < _size447; ++_i449) {
          var elem450 = null;
          elem450 = input.readString();
          this.devicePathList.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCreateTimeseriesUsingSchemaTemplateReq.prototype.write = function(output) {
  output.writeStructBegin('TCreateTimeseriesUsingSchemaTemplateReq');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1);
    output.writeI64(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.devicePathList !== null && this.devicePathList !== undefined) {
    output.writeFieldBegin('devicePathList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.devicePathList.length);
    for (var iter451 in this.devicePathList) {
      if (this.devicePathList.hasOwnProperty(iter451)) {
        iter451 = this.devicePathList[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSyncIdentityInfo = module.exports.TSyncIdentityInfo = function(args) {
  this.pipeName = null;
  this.createTime = null;
  this.version = null;
  this.database = null;
  if (args) {
    if (args.pipeName !== undefined && args.pipeName !== null) {
      this.pipeName = args.pipeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pipeName is unset!');
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createTime is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field database is unset!');
    }
  }
};
TSyncIdentityInfo.prototype = {};
TSyncIdentityInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pipeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSyncIdentityInfo.prototype.write = function(output) {
  output.writeStructBegin('TSyncIdentityInfo');
  if (this.pipeName !== null && this.pipeName !== undefined) {
    output.writeFieldBegin('pipeName', Thrift.Type.STRING, 1);
    output.writeString(this.pipeName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 2);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 4);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSyncTransportMetaInfo = module.exports.TSyncTransportMetaInfo = function(args) {
  this.fileName = null;
  this.startIndex = null;
  if (args) {
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileName is unset!');
    }
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startIndex is unset!');
    }
  }
};
TSyncTransportMetaInfo.prototype = {};
TSyncTransportMetaInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startIndex = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSyncTransportMetaInfo.prototype.write = function(output) {
  output.writeStructBegin('TSyncTransportMetaInfo');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I64, 2);
    output.writeI64(this.startIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPipeTransferReq = module.exports.TPipeTransferReq = function(args) {
  this.version = null;
  this.type = null;
  this.body = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field body is unset!');
    }
  }
};
TPipeTransferReq.prototype = {};
TPipeTransferReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.version = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.type = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPipeTransferReq.prototype.write = function(output) {
  output.writeStructBegin('TPipeTransferReq');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.BYTE, 1);
    output.writeByte(this.version);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I16, 2);
    output.writeI16(this.type);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPipeTransferResp = module.exports.TPipeTransferResp = function(args) {
  this.status = null;
  this.body = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
TPipeTransferResp.prototype = {};
TPipeTransferResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPipeTransferResp.prototype.write = function(output) {
  output.writeStructBegin('TPipeTransferResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 2);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPipeSubscribeReq = module.exports.TPipeSubscribeReq = function(args) {
  this.version = null;
  this.type = null;
  this.body = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
TPipeSubscribeReq.prototype = {};
TPipeSubscribeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.version = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.type = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPipeSubscribeReq.prototype.write = function(output) {
  output.writeStructBegin('TPipeSubscribeReq');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.BYTE, 1);
    output.writeByte(this.version);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I16, 2);
    output.writeI16(this.type);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPipeSubscribeResp = module.exports.TPipeSubscribeResp = function(args) {
  this.status = null;
  this.version = null;
  this.type = null;
  this.body = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = Thrift.copyList(args.body, [null]);
    }
  }
};
TPipeSubscribeResp.prototype = {};
TPipeSubscribeResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.version = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.type = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.body = [];
        var _rtmp3453 = input.readListBegin();
        var _size452 = _rtmp3453.size || 0;
        for (var _i454 = 0; _i454 < _size452; ++_i454) {
          var elem455 = null;
          elem455 = input.readBinary();
          this.body.push(elem455);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPipeSubscribeResp.prototype.write = function(output) {
  output.writeStructBegin('TPipeSubscribeResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.BYTE, 2);
    output.writeByte(this.version);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I16, 3);
    output.writeI16(this.type);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.body.length);
    for (var iter456 in this.body) {
      if (this.body.hasOwnProperty(iter456)) {
        iter456 = this.body[iter456];
        output.writeBinary(iter456);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSBackupConfigurationResp = module.exports.TSBackupConfigurationResp = function(args) {
  this.status = null;
  this.enableOperationSync = null;
  this.secondaryAddress = null;
  this.secondaryPort = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new common_ttypes.TSStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.enableOperationSync !== undefined && args.enableOperationSync !== null) {
      this.enableOperationSync = args.enableOperationSync;
    }
    if (args.secondaryAddress !== undefined && args.secondaryAddress !== null) {
      this.secondaryAddress = args.secondaryAddress;
    }
    if (args.secondaryPort !== undefined && args.secondaryPort !== null) {
      this.secondaryPort = args.secondaryPort;
    }
  }
};
TSBackupConfigurationResp.prototype = {};
TSBackupConfigurationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new common_ttypes.TSStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enableOperationSync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secondaryAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.secondaryPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSBackupConfigurationResp.prototype.write = function(output) {
  output.writeStructBegin('TSBackupConfigurationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.enableOperationSync !== null && this.enableOperationSync !== undefined) {
    output.writeFieldBegin('enableOperationSync', Thrift.Type.BOOL, 2);
    output.writeBool(this.enableOperationSync);
    output.writeFieldEnd();
  }
  if (this.secondaryAddress !== null && this.secondaryAddress !== undefined) {
    output.writeFieldBegin('secondaryAddress', Thrift.Type.STRING, 3);
    output.writeString(this.secondaryAddress);
    output.writeFieldEnd();
  }
  if (this.secondaryPort !== null && this.secondaryPort !== undefined) {
    output.writeFieldBegin('secondaryPort', Thrift.Type.I32, 4);
    output.writeI32(this.secondaryPort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSConnectionInfo = module.exports.TSConnectionInfo = function(args) {
  this.userName = null;
  this.logInTime = null;
  this.connectionId = null;
  this.type = null;
  if (args) {
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userName is unset!');
    }
    if (args.logInTime !== undefined && args.logInTime !== null) {
      this.logInTime = args.logInTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logInTime is unset!');
    }
    if (args.connectionId !== undefined && args.connectionId !== null) {
      this.connectionId = args.connectionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field connectionId is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
TSConnectionInfo.prototype = {};
TSConnectionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.logInTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.connectionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSConnectionInfo.prototype.write = function(output) {
  output.writeStructBegin('TSConnectionInfo');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.logInTime !== null && this.logInTime !== undefined) {
    output.writeFieldBegin('logInTime', Thrift.Type.I64, 2);
    output.writeI64(this.logInTime);
    output.writeFieldEnd();
  }
  if (this.connectionId !== null && this.connectionId !== undefined) {
    output.writeFieldBegin('connectionId', Thrift.Type.STRING, 3);
    output.writeString(this.connectionId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSConnectionInfoResp = module.exports.TSConnectionInfoResp = function(args) {
  this.connectionInfoList = null;
  if (args) {
    if (args.connectionInfoList !== undefined && args.connectionInfoList !== null) {
      this.connectionInfoList = Thrift.copyList(args.connectionInfoList, [ttypes.TSConnectionInfo]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field connectionInfoList is unset!');
    }
  }
};
TSConnectionInfoResp.prototype = {};
TSConnectionInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.connectionInfoList = [];
        var _rtmp3458 = input.readListBegin();
        var _size457 = _rtmp3458.size || 0;
        for (var _i459 = 0; _i459 < _size457; ++_i459) {
          var elem460 = null;
          elem460 = new ttypes.TSConnectionInfo();
          elem460.read(input);
          this.connectionInfoList.push(elem460);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSConnectionInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TSConnectionInfoResp');
  if (this.connectionInfoList !== null && this.connectionInfoList !== undefined) {
    output.writeFieldBegin('connectionInfoList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.connectionInfoList.length);
    for (var iter461 in this.connectionInfoList) {
      if (this.connectionInfoList.hasOwnProperty(iter461)) {
        iter461 = this.connectionInfoList[iter461];
        iter461.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};