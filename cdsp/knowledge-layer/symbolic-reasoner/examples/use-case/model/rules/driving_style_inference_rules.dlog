@prefix car: <http://example.ontology.com/car#> .
@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# explanination of the algorithm
# observation: d d d d d d (c)
# timestamp:   1 2 3 4 5 6
# angle value: 1 1 1 1 4 5
# lat,long:    a b c d e f
# segment:           st  ed  (segment4_6 hasStartPont d, hasEndPoint f, angle_diff 4)


#current observation for a specific property is deteced by find the observation with the min timestamp.
car:CurrentObservation[?obs1]:-
sosa:Observation[?obs],
AGGREGATE(
    sosa:observedProperty[?obs,?op],
    sosa:phenomenonTime[?obs,?pt]
    on ?op
    BIND MAX(?pt) as ?max_diff
 ),
sosa:Observation[?obs1],
sosa:observedProperty[?obs1,?op],
sosa:phenomenonTime[?obs1,?max_diff].

# find the observations with specific property in 3 second slide window by comparing the observation timestamp with the identified current observation 
# find at least one observation that is different from the current observation which is within 3s slide window.
car:within3s[?obs,?sw],
car:within3s[?cobs,?sw]:-
car:3SecSlideWindow[?sw],
car:hasWindowSize[?sw,?size],
sosa:Observation[?obs],
sosa:observedProperty[?obs,?op],
sosa:phenomenonTime[?obs,?pt],
car:CurrentObservation[?cobs],
sosa:observedProperty[?cobs,?op],
sosa:phenomenonTime[?cobs,?cpt],
FILTER(?obs != ?cobs),
BIND(IF(xsd:dateTime(?cpt) > xsd:dateTime(?pt), 
        xsd:dateTime(?cpt) - xsd:dateTime(?pt), 
        xsd:dateTime(?pt) - xsd:dateTime(?cpt)) AS ?diff),
FILTER(?diff <= ?size ).



# detect if two observations in the 3 second slide window has angle changes more than 90, and if the current speed is more than 50
# generate a segment of the trip out
car:Segment[?segment], 
car:hasStartPoint[?segment,?sp], 
car:latitude[?sp,?plat_val], 
car:longitude[?sp,?plong_val], 
car:hasEndPoint[?segment,?ep],
car:latitude[?ep,?clat_val], 
car:longitude[?ep,?clong_val], 
car:drivingStyle[?segment, "aggressive_driving"],
car:angleChange[?segment, ?angle_diff],
car:startTime[?segment,?pt2_trimmed],
car:endTime[?segment,?pt1_trimmed],
car:speed[?segment,?speed_value]:-
# current angle observation        
car:CurrentObservation[?obs1],
sosa:hasFeatureOfInterest[?obs1,?foi1],
#car:SteeringWheel[?foi1],
sosa:observedProperty[?obs1, car:angle],
sosa:hasSimpleResult[?obs1,?angle1],
sosa:phenomenonTime[?obs1,?pt1],
# all other angle observation
sosa:Observation[?obs2],
sosa:hasFeatureOfInterest[?obs2,?foi2],
#car:SteeringWheel[?foi2],
sosa:observedProperty[?obs2, car:angle],
sosa:hasSimpleResult[?obs2,?angle2],
sosa:phenomenonTime[?obs2,?pt2],
car:3SecSlideWindow[?sw],
car:within3s[?obs1,?sw],
car:within3s[?obs2,?sw],
FILTER(?obs1 != ?obs2),
BIND(ABS(xsd:float(?angle1) - xsd:float(?angle2)) AS ?angle_diff),
FILTER(?angle_diff > 180),
# current speed
car:CurrentObservation[?obs3],
sosa:observedProperty[?obs3, car:speed],
sosa:hasSimpleResult[?obs3,?speed_value],
FILTER(xsd:float(?speed_value) > 10),
#current latitude and longtitude
car:CurrentObservation[?cobs_lat],
sosa:observedProperty[?cobs_lat, car:latitude],
sosa:hasSimpleResult[?cobs_lat,?clat_val],
sosa:phenomenonTime[?cobs_lat,?cpt_lat_1],
car:CurrentObservation[?cobs_long],
sosa:observedProperty[?cobs_long, car:longitude],
sosa:hasSimpleResult[?cobs_long,?clong_val],
sosa:phenomenonTime[?cobs_long,?cpt_long_1],
#previous latitude and longtitude
sosa:Observation[?pobs_lat],
sosa:observedProperty[?pobs_lat, car:latitude],
sosa:hasSimpleResult[?pobs_lat,?plat_val],
sosa:phenomenonTime[?pobs_lat,?cpt_lat_2],
sosa:Observation[?pobs_long],
sosa:observedProperty[?pobs_long, car:longitude],
sosa:hasSimpleResult[?pobs_long,?plong_val],
sosa:phenomenonTime[?pobs_long,?cpt_long_2],
BIND(SUBSTR(STR(?pt1), 1, 19) AS ?pt1_trimmed),
BIND(SUBSTR(STR(?cpt_lat_1), 1, 19) AS ?cpt_lat_1_trimmed),
BIND(SUBSTR(STR(?cpt_long_1), 1, 19) AS ?cpt_long_1_trimmed),
FILTER(?pt1_trimmed = ?cpt_lat_1_trimmed && ?pt1_trimmed = ?cpt_long_1_trimmed),
BIND(SUBSTR(STR(?pt2), 1, 19) AS ?pt2_trimmed),
BIND(SUBSTR(STR(?cpt_lat_2), 1, 19) AS ?cpt_lat_2_trimmed),
BIND(SUBSTR(STR(?cpt_long_2), 1, 19) AS ?cpt_long_2_trimmed),
FILTER(?pt2_trimmed = ?cpt_lat_2_trimmed && ?pt1_trimmed = ?cpt_long_2_trimmed),
#generate a segment with the start [start (lat, long), end (lat, long)]
BIND(REPLACE(STR(?pt2_trimmed), "\\W", "", "i") AS ?pt2_date_time_str),
BIND(IRI(CONCAT("http://example.ontology.com/car#sp", str(?pt2_date_time_str))) as ?sp),
BIND(REPLACE(STR(?pt1_trimmed), "\\W", "", "i") AS ?pt1_date_time_str),
BIND(IRI(CONCAT("http://example.ontology.com/car#ep", str(?pt1_date_time_str))) as ?ep),
BIND(IRI(CONCAT("http://example.ontology.com/car#segment", str(?pt2_date_time_str),str(?pt1_date_time_str))) as ?segment).


car:avgAngleChange[?segment, ?avg_angle_diff]:-
car:Segment[?segment], 
AGGREGATE(
car:angleChange[?segment, ?angle_diff]
on ?segment
BIND AVG(?angle_diff) AS ?avg_angle_diff
).

